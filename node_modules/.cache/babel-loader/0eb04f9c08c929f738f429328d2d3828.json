{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import addNewBlock from '../gameEvents/addNewBlock';\n\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class Rotate extends React.Component {\n  move(currentArea) {\n    let newArea = [];\n    let stoppedBlocks = currentArea.map(el => {\n      return el === 2 ? el = 2 : el = 0;\n    });\n    let movingBlocks = currentArea.map(el => {\n      return el === 1 ? el = 1 : el = 0;\n    });\n    const areaScheme = dataTransform.arrToScheme(movingBlocks);\n    let filteredArea = areaScheme.filter(el => {\n      return el.some(elem => {\n        return elem !== 0;\n      });\n    });\n    ret;\n    console.log(filteredArea);\n\n    if (movingBlocks.slice(-10).includes(1)) {\n      return this.stopBlock(currentArea);\n    } else {\n      movingBlocks.splice(230);\n      movingBlocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].concat(movingBlocks);\n    }\n\n    for (let i = 0; i < 240; i++) {\n      const sum = stoppedBlocks[i] + movingBlocks[i];\n\n      if (sum <= 2) {\n        newArea.push(sum);\n      } else {\n        return this.stopBlock(currentArea);\n      }\n    }\n\n    return newArea;\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/Rotate.js"],"names":["React","useState","useEffect","DataTransform","dataTransform","Rotate","Component","move","currentArea","newArea","stoppedBlocks","map","el","movingBlocks","areaScheme","arrToScheme","filteredArea","filter","some","elem","ret","console","log","slice","includes","stopBlock","splice","concat","i","sum","push"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAIC,aAAa,GAAG,IAAID,aAAJ,EAApB;AAEA,eAAe,MAAME,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAEhDC,EAAAA,IAAI,CAACC,WAAD,EAAc;AACd,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,aAAa,GAAGF,WAAW,CAACG,GAAZ,CAAiBC,EAAD,IAAQ;AACxC,aAAOA,EAAE,KAAK,CAAP,GAAWA,EAAE,GAAG,CAAhB,GAAoBA,EAAE,GAAG,CAAhC;AACH,KAFmB,CAApB;AAGA,QAAIC,YAAY,GAAGL,WAAW,CAACG,GAAZ,CAAiBC,EAAD,IAAQ;AACvC,aAAOA,EAAE,KAAK,CAAP,GAAWA,EAAE,GAAG,CAAhB,GAAoBA,EAAE,GAAG,CAAhC;AACH,KAFkB,CAAnB;AAGA,UAAME,UAAU,GAAGV,aAAa,CAACW,WAAd,CAA0BF,YAA1B,CAAnB;AACA,QAAIG,YAAY,GAAGF,UAAU,CAACG,MAAX,CAAmBL,EAAD,IAAQ;AACzC,aAAOA,EAAE,CAACM,IAAH,CAASC,IAAD,IAAU;AACrB,eAAOA,IAAI,KAAK,CAAhB;AACH,OAFM,CAAP;AAGH,KAJkB,CAAnB;AAKAC,IAAAA,GAAG;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;;AACA,QAAIH,YAAY,CAACU,KAAb,CAAmB,CAAC,EAApB,EAAwBC,QAAxB,CAAiC,CAAjC,CAAJ,EAAyC;AACrC,aAAO,KAAKC,SAAL,CAAejB,WAAf,CAAP;AACH,KAFD,MAEO;AACHK,MAAAA,YAAY,CAACa,MAAb,CAAoB,GAApB;AACAb,MAAAA,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+Bc,MAA/B,CAAsCd,YAAtC,CAAf;AACH;;AACD,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,YAAMC,GAAG,GAAGnB,aAAa,CAACkB,CAAD,CAAb,GAAmBf,YAAY,CAACe,CAAD,CAA3C;;AACA,UAAIC,GAAG,IAAI,CAAX,EAAc;AACVpB,QAAAA,OAAO,CAACqB,IAAR,CAAaD,GAAb;AACH,OAFD,MAEO;AACH,eAAO,KAAKJ,SAAL,CAAejB,WAAf,CAAP;AACH;AACJ;;AACD,WAAOC,OAAP;AACH;;AAjC+C","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import addNewBlock from '../gameEvents/addNewBlock';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class Rotate extends React.Component {\r\n\r\n    move(currentArea) {\r\n        let newArea = []\r\n        let stoppedBlocks = currentArea.map((el) => {\r\n            return el === 2 ? el = 2 : el = 0\r\n        })\r\n        let movingBlocks = currentArea.map((el) => {\r\n            return el === 1 ? el = 1 : el = 0\r\n        })\r\n        const areaScheme = dataTransform.arrToScheme(movingBlocks)\r\n        let filteredArea = areaScheme.filter((el) => {\r\n            return el.some((elem) => {\r\n                return elem !== 0\r\n            })\r\n        })\r\n        ret\r\n        console.log(filteredArea)\r\n        if (movingBlocks.slice(-10).includes(1)) {\r\n            return this.stopBlock(currentArea)\r\n        } else {\r\n            movingBlocks.splice(230)\r\n            movingBlocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].concat(movingBlocks)\r\n        }\r\n        for (let i = 0; i < 240; i++) {\r\n            const sum = stoppedBlocks[i] + movingBlocks[i]\r\n            if (sum <= 2) {\r\n                newArea.push(sum)\r\n            } else {\r\n                return this.stopBlock(currentArea)\r\n            }\r\n        }\r\n        return newArea\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}