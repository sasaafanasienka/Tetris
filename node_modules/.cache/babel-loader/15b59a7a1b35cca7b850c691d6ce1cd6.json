{"ast":null,"code":"import blockExamples from '../constants/blockExamples';\n\nfunction random(maxNumber) {\n  let rand = Math.random() * (maxNumber + 1);\n  return Math.floor(rand);\n}\n\nfunction randomRotate(brick) {\n  brickSize = brick.length;\n  let rotatedBrick = [];\n\n  for (let i = 0; i < brickSize; i++) {\n    let newRow = [];\n\n    for (let a = 0; a < brickSize; a++) {\n      newRow.push(movingBrick[brickSize - a - 1][i]);\n    }\n\n    if (newRow.every(el => {\n      return el === 0;\n    })) {\n      rotatedBrick.unshift(newRow);\n    } else {\n      rotatedBrick.push(newRow);\n    }\n  }\n\n  return rotatedBrick;\n}\n\nexport default function randomBlock() {\n  const newBrick = blockExamples[random(7)];\n  const newBrickSize = newBrick.length;\n  return {\n    brick: newBrick,\n    baseColumn: Math.ceil((10 - newBrickSize) / 2)\n  };\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/gameEvents/randomBlock.js"],"names":["blockExamples","random","maxNumber","rand","Math","floor","randomRotate","brick","brickSize","length","rotatedBrick","i","newRow","a","push","movingBrick","every","el","unshift","randomBlock","newBrick","newBrickSize","baseColumn","ceil"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,4BAA1B;;AAEA,SAASC,MAAT,CAAgBC,SAAhB,EAA2B;AACvB,MAAIC,IAAI,GAAGC,IAAI,CAACH,MAAL,MAAiBC,SAAS,GAAG,CAA7B,CAAX;AACA,SAAOE,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACH;;AAED,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAEzBC,EAAAA,SAAS,GAAGD,KAAK,CAACE,MAAlB;AAEA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,SAArB,EAAgCG,CAAC,EAAjC,EAAsC;AAClC,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGL,SAArB,EAAgCK,CAAC,EAAjC,EAAsC;AAClCD,MAAAA,MAAM,CAACE,IAAP,CAAYC,WAAW,CAACP,SAAS,GAAGK,CAAZ,GAAgB,CAAjB,CAAX,CAA+BF,CAA/B,CAAZ;AACH;;AACD,QAAIC,MAAM,CAACI,KAAP,CAAcC,EAAD,IAAQ;AAAE,aAAOA,EAAE,KAAK,CAAd;AAAiB,KAAxC,CAAJ,EAA+C;AAC3CP,MAAAA,YAAY,CAACQ,OAAb,CAAqBN,MAArB;AACH,KAFD,MAEO;AACHF,MAAAA,YAAY,CAACI,IAAb,CAAkBF,MAAlB;AACH;AACJ;;AAED,SAAOF,YAAP;AACH;;AAED,eAAe,SAASS,WAAT,GAAuB;AAElC,QAAMC,QAAQ,GAAGpB,aAAa,CAACC,MAAM,CAAC,CAAD,CAAP,CAA9B;AACA,QAAMoB,YAAY,GAAGD,QAAQ,CAACX,MAA9B;AAEA,SAAO;AACHF,IAAAA,KAAK,EAAEa,QADJ;AAEHE,IAAAA,UAAU,EAAElB,IAAI,CAACmB,IAAL,CAAU,CAAC,KAAKF,YAAN,IAAsB,CAAhC;AAFT,GAAP;AAIH","sourcesContent":["import blockExamples from '../constants/blockExamples'\r\n\r\nfunction random(maxNumber) {\r\n    let rand = Math.random() * (maxNumber + 1);\r\n    return Math.floor(rand);\r\n}\r\n\r\nfunction randomRotate(brick) {\r\n\r\n    brickSize = brick.length\r\n    \r\n    let rotatedBrick = []\r\n        \r\n    for ( let i = 0; i < brickSize; i++ ) {\r\n        let newRow = []\r\n        for ( let a = 0; a < brickSize; a++ ) {\r\n            newRow.push(movingBrick[brickSize - a - 1][i])\r\n        }\r\n        if (newRow.every((el) => { return el === 0 })) {\r\n            rotatedBrick.unshift(newRow)\r\n        } else {\r\n            rotatedBrick.push(newRow)\r\n        }\r\n    }\r\n    \r\n    return rotatedBrick\r\n}\r\n\r\nexport default function randomBlock() {\r\n\r\n    const newBrick = blockExamples[random(7)]\r\n    const newBrickSize = newBrick.length\r\n\r\n    return {\r\n        brick: newBrick,\r\n        baseColumn: Math.ceil((10 - newBrickSize) / 2)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}