{"ast":null,"code":"import scoreTable from '../constants/scoreTable';\nexport default function removeFullRows(current) {\n  const playField = current.playField;\n  const movingBrick = current.movingBrick;\n  const baseLine = current.baseLine;\n  const baseColumn = current.baseColumn;\n  const brickSize = current.movingBrick.length;\n  let fullRowsQuantity = 0;\n  let newPlayField = [];\n\n  for (let i = 0; i < 24; i++) {\n    if (playField[i].some(el => {\n      return el !== 2;\n    })) {\n      newPlayField.push(playField[i]);\n    } else {\n      fullRowsQuantity = fullRowsQuantity + 1;\n    }\n  }\n\n  for (let i = 0; i < 24 - newPlayField.length; i++) {\n    newPlayField.unshift([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  }\n\n  return;\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/gameEvents/removeFullRows.js"],"names":["scoreTable","removeFullRows","current","playField","movingBrick","baseLine","baseColumn","brickSize","length","fullRowsQuantity","newPlayField","i","some","el","push","unshift"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,yBAAvB;AAEA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC5C,QAAMC,SAAS,GAAGD,OAAO,CAACC,SAA1B;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACE,WAA5B;AACA,QAAMC,QAAQ,GAAGH,OAAO,CAACG,QAAzB;AACA,QAAMC,UAAU,GAAGJ,OAAO,CAACI,UAA3B;AACA,QAAMC,SAAS,GAAGL,OAAO,CAACE,WAAR,CAAoBI,MAAtC;AAEA,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAIR,SAAS,CAACQ,CAAD,CAAT,CAAaC,IAAb,CAAmBC,EAAD,IAAQ;AAAE,aAAOA,EAAE,KAAK,CAAd;AAAiB,KAA7C,CAAJ,EAAoD;AAChDH,MAAAA,YAAY,CAACI,IAAb,CAAkBX,SAAS,CAACQ,CAAD,CAA3B;AACH,KAFD,MAEO;AACHF,MAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAtC;AACH;AACJ;;AACD,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,YAAY,CAACF,MAAtC,EAA8CG,CAAC,EAA/C,EAAmD;AAC/CD,IAAAA,YAAY,CAACK,OAAb,CAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAArB;AACH;;AACD;AACH","sourcesContent":["import scoreTable from '../constants/scoreTable'\r\n\r\nexport default function removeFullRows(current) {\r\n    const playField = current.playField\r\n    const movingBrick = current.movingBrick\r\n    const baseLine = current.baseLine\r\n    const baseColumn = current.baseColumn\r\n    const brickSize = current.movingBrick.length\r\n\r\n    let fullRowsQuantity = 0\r\n    let newPlayField = []\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        if (playField[i].some((el) => { return el !== 2 })) {\r\n            newPlayField.push(playField[i])\r\n        } else {\r\n            fullRowsQuantity = fullRowsQuantity + 1\r\n        }\r\n    }\r\n    for (let i = 0; i < 24 - newPlayField.length; i++) {\r\n        newPlayField.unshift([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n    }\r\n    return\r\n}"]},"metadata":{},"sourceType":"module"}