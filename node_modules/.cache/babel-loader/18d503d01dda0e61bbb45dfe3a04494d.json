{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import addNewBlock from '../gameEvents/addNewBlock';\n\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class MoveDown extends React.Component {\n  // stopBlock(currentArea) {\n  //     console.log('block will be stopped')\n  //     let newArea = []\n  //     for (let row = 0; row < 24; row++) {\n  //         if (!currentArea[row].includes(1)) {\n  //             newArea.push(currentArea[row])\n  //         } else {\n  //             currentArea[row].forEach((el) => {\n  //                 if (el === 1) {\n  //                     el = 2\n  //                 }\n  //             })\n  //             newArea.push(currentArea[row])\n  //         }\n  //     }\n  // }\n  // removeFullRows(area) {\n  //     let filteredArea = area.filter((row) => {\n  //         return row.some((el) => {\n  //             return el === 0\n  //         })\n  //     })\n  //     return area\n  // }\n  move(currentArea) {\n    let newArea = [];\n    let areaInArray = dataTransform.schemeToArr(currentArea);\n    let stoppedBlocks = areaInArray.forEach(el => {\n      return el !== 2 ? el = 0 : el = 2;\n    });\n    console.log(stoppedBlocks); // let movingBlocks = areaInArray.forEach((el) => {\n    //     el !== 1 ? el = 0 : el = 1\n    // })\n    // for (let i = 0; i < 10; i++) {\n    //     const deleteLastElem = movingBlocks.pop()\n    //     if (deleteLastElem === 1) {\n    //         return this.stopBlock(currentArea)\n    //     }\n    // }\n    // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].forEach((el) => [\n    //     movingBlocks.unshift(el)\n    // ])\n    // for (let i = 0; i < 240; i++) {\n    //     const sum = stoppedBlocks[i] + movingBlocks[i]\n    //     if (sum < 2) {\n    //         newArea.push(sum)\n    //     } else {\n    //         return this.stopBlock(currentArea)\n    //     }\n    // }\n\n    return currentArea;\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/MoveDown.js"],"names":["React","useState","useEffect","DataTransform","dataTransform","MoveDown","Component","move","currentArea","newArea","areaInArray","schemeToArr","stoppedBlocks","forEach","el","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAIC,aAAa,GAAG,IAAID,aAAJ,EAApB;AAEA,eAAe,MAAME,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,IAAI,CAACC,WAAD,EAAc;AACd,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,WAAW,GAAGN,aAAa,CAACO,WAAd,CAA0BH,WAA1B,CAAlB;AACA,QAAII,aAAa,GAAGF,WAAW,CAACG,OAAZ,CAAqBC,EAAD,IAAQ;AAC5C,aAAOA,EAAE,KAAK,CAAP,GAAWA,EAAE,GAAG,CAAhB,GAAoBA,EAAE,GAAG,CAAhC;AACH,KAFmB,CAApB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ,EANc,CAOd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOJ,WAAP;AACH;;AAxDiD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import addNewBlock from '../gameEvents/addNewBlock';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    // stopBlock(currentArea) {\r\n    //     console.log('block will be stopped')\r\n    //     let newArea = []\r\n    //     for (let row = 0; row < 24; row++) {\r\n    //         if (!currentArea[row].includes(1)) {\r\n    //             newArea.push(currentArea[row])\r\n    //         } else {\r\n    //             currentArea[row].forEach((el) => {\r\n    //                 if (el === 1) {\r\n    //                     el = 2\r\n    //                 }\r\n    //             })\r\n    //             newArea.push(currentArea[row])\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // removeFullRows(area) {\r\n    //     let filteredArea = area.filter((row) => {\r\n    //         return row.some((el) => {\r\n    //             return el === 0\r\n    //         })\r\n    //     })\r\n    //     return area\r\n    // }\r\n\r\n    move(currentArea) {\r\n        let newArea = []\r\n        let areaInArray = dataTransform.schemeToArr(currentArea)\r\n        let stoppedBlocks = areaInArray.forEach((el) => {\r\n            return el !== 2 ? el = 0 : el = 2\r\n        })\r\n        console.log(stoppedBlocks)\r\n        // let movingBlocks = areaInArray.forEach((el) => {\r\n        //     el !== 1 ? el = 0 : el = 1\r\n        // })\r\n        // for (let i = 0; i < 10; i++) {\r\n        //     const deleteLastElem = movingBlocks.pop()\r\n        //     if (deleteLastElem === 1) {\r\n        //         return this.stopBlock(currentArea)\r\n        //     }\r\n        // }\r\n        // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].forEach((el) => [\r\n        //     movingBlocks.unshift(el)\r\n        // ])\r\n        // for (let i = 0; i < 240; i++) {\r\n        //     const sum = stoppedBlocks[i] + movingBlocks[i]\r\n        //     if (sum < 2) {\r\n        //         newArea.push(sum)\r\n        //     } else {\r\n        //         return this.stopBlock(currentArea)\r\n        //     }\r\n        // }\r\n        return currentArea\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}