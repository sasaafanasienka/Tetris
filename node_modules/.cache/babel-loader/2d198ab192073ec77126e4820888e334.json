{"ast":null,"code":"const blockExamples = {\n  1: [[1, 1], [1, 1]],\n  //кубик (O)\n  2: [[1, 1, 1, 1]],\n  //палка горизонатльная (I-horizontal)\n  3: [[1], [1], [1], [1]] //палка вертикальная (I-vertical)\n\n};\nconst blockGenerate = new Promise((resolve, reject) => {\n  const numberOfblock = Math.floor(Math.random() * Math.floor(3));\n  resolve(numberOfblock);\n});\nblockGenerate.then(value => {\n  console.log(value); // expected output: \"foo\"\n});\n\nfunction blockGen() {\n  const numberOfblock = Math.floor(Math.random() * Math.floor(3));\n  return blockExamples[3]; // return blockExamples[numberOfblock]\n}\n\nexport default function addNewBlock(area) {\n  const block = blockGen();\n  console.log(block);\n  const renderStartPoint = Math.round((10 - block.length) / 2);\n\n  for (let i = 0; i < block.length; i++) {\n    for (let a = 0; a < block[i].length; a++) {\n      area[i][a + renderStartPoint] = 1;\n    }\n  }\n\n  return area;\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/gameEvents/addNewBlock.js"],"names":["blockExamples","blockGenerate","Promise","resolve","reject","numberOfblock","Math","floor","random","then","value","console","log","blockGen","addNewBlock","area","block","renderStartPoint","round","length","i","a"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AAClB,KAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CADe;AACG;AACrB,KAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,CAFe;AAEC;AACnB,KAAG,CAAC,CAAC,CAAD,CAAD,EAAM,CAAC,CAAD,CAAN,EAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,CAAhB,CAHe,CAGO;;AAHP,CAAtB;AAMA,MAAMC,aAAa,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnD,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,CAAX,CAA3B,CAAtB;AACAJ,EAAAA,OAAO,CAACE,aAAD,CAAP;AACD,CAHmB,CAAtB;AAKEJ,aAAa,CAACQ,IAAd,CAAoBC,KAAD,IAAW;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAD4B,CAE5B;AACD,CAHD;;AAMF,SAASG,QAAT,GAAoB;AAChB,QAAMR,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,CAAX,CAA3B,CAAtB;AACA,SAAOP,aAAa,CAAC,CAAD,CAApB,CAFgB,CAGhB;AACH;;AAED,eAAe,SAASc,WAAT,CAAqBC,IAArB,EAA2B;AACtC,QAAMC,KAAK,GAAGH,QAAQ,EAAtB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,QAAMC,gBAAgB,GAAGX,IAAI,CAACY,KAAL,CAAW,CAAC,KAAKF,KAAK,CAACG,MAAZ,IAAsB,CAAjC,CAAzB;;AACI,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACG,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACI,CAAD,CAAL,CAASD,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACtCN,MAAAA,IAAI,CAACK,CAAD,CAAJ,CAAQC,CAAC,GAAGJ,gBAAZ,IAAgC,CAAhC;AACH;AACJ;;AACL,SAAOF,IAAP;AACH","sourcesContent":["const blockExamples = {\r\n    1: [[1, 1], [1, 1]], //кубик (O)\r\n    2: [[1, 1, 1, 1]], //палка горизонатльная (I-horizontal)\r\n    3: [[1], [1], [1], [1]], //палка вертикальная (I-vertical)\r\n}\r\n\r\nconst blockGenerate = new Promise((resolve, reject) => {\r\n    const numberOfblock = Math.floor(Math.random() * Math.floor(3));\r\n    resolve(numberOfblock)\r\n  });\r\n  \r\n  blockGenerate.then((value) => {\r\n    console.log(value);\r\n    // expected output: \"foo\"\r\n  });\r\n\r\n\r\nfunction blockGen() {\r\n    const numberOfblock = Math.floor(Math.random() * Math.floor(3))\r\n    return blockExamples[3]\r\n    // return blockExamples[numberOfblock]\r\n}\r\n\r\nexport default function addNewBlock(area) {\r\n    const block = blockGen();\r\n    console.log(block)\r\n    const renderStartPoint = Math.round((10 - block.length) / 2)\r\n        for (let i = 0; i < block.length; i++) {\r\n            for (let a = 0; a < block[i].length; a++) {\r\n                area[i][a + renderStartPoint] = 1\r\n            }\r\n        }\r\n    return area\r\n}"]},"metadata":{},"sourceType":"module"}