{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import addNewBlock from '../gameEvents/addNewBlock';\n\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class MoveDown extends React.Component {\n  stopBlock(current) {\n    const playField = current.playField;\n    const movingBrick = current.movingBrick;\n    const baseLine = current.baseLine;\n    const baseColumn = current.baseColumn;\n    const brickSideLength = current.movingBrick.length;\n    let newField = [];\n\n    for (let i = 0; i < 24; i++) {\n      if (i <= baseLine - brickSideLength || i > baseLine) {\n        //если в строке нет движущейся фигуры\n        newField.push(playField[i]); //то оставляем поле как есть\n      } else {\n        let newRow = [];\n\n        for (let a = 0; a < 10; a++) {\n          //если движущаяся фигура есть, начинаем првоерять по колонкам\n          if (a < baseColumn || a >= baseColumn + brickSideLength) {\n            //если фигуры нет в колонках\n            newRow.push(playField[i][a]); // тоже оставляем как есть\n          } else {\n            newRow.push(movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn]); //тут данные поля заменяются данными движ фигруы\n          }\n        }\n\n        newField.push(newRow);\n      }\n    }\n\n    return {\n      playField: newField,\n      movingBrick: [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n      baseLine: 3,\n      baseColumn: 3,\n      score: current.score,\n      speed: current.speed\n    };\n  }\n\n  move(current) {\n    debugger;\n    console.log(current);\n    const playField = current.playField;\n    const movingBrick = current.movingBrick;\n    const baseLine = current.baseLine;\n    const baseColumn = current.baseColumn;\n    const brickSideLength = current.movingBrick.length;\n\n    if (baseLine === 23) {\n      return this.stopBlock(playField, movingBrick);\n    }\n\n    for (let i = baseLine - brickSideLength + 2; i <= baseLine + 1; i++) {\n      for (let a = baseColumn; a < baseColumn + brickSideLength; a++) {\n        // console.log(i)\n        // console.log(a)\n        // console.log(i - brickSideLength)\n        // console.log(a - baseColumn)\n        if (playField[i][a] + movingBrick[i - brickSideLength + 1][a - baseColumn] > 2) {\n          return this.stopBlock(current);\n        }\n      }\n    }\n\n    return {\n      playField: current.playField,\n      movingBrick: current.movingBrick,\n      baseLine: current.baseLine + 1,\n      baseColumn: current.baseColumn,\n      score: current.score,\n      speed: current.speed\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/MoveDown.js"],"names":["React","useState","useEffect","DataTransform","dataTransform","MoveDown","Component","stopBlock","current","playField","movingBrick","baseLine","baseColumn","brickSideLength","length","newField","i","push","newRow","a","score","speed","move","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import addNewBlock from '../gameEvents/addNewBlock';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    stopBlock(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSideLength = current.movingBrick.length\r\n\r\n        let newField = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSideLength || i > baseLine) { //если в строке нет движущейся фигуры\r\n                newField.push(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                let newRow = []\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSideLength ) { //если фигуры нет в колонках\r\n                        newRow.push(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        newRow.push(movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn]) //тут данные поля заменяются данными движ фигруы\r\n                    }\r\n                }\r\n                newField.push(newRow)\r\n            }\r\n        }\r\n        return {\r\n            playField: newField,\r\n            movingBrick: [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]],\r\n            baseLine: 3,\r\n            baseColumn: 3,\r\n            score: current.score,\r\n            speed: current.speed\r\n        }\r\n    }\r\n\r\n    move(current) {\r\n        debugger\r\n        console.log(current)\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSideLength = current.movingBrick.length\r\n\r\n        if (baseLine === 23) {\r\n            return this.stopBlock(playField, movingBrick)\r\n        }\r\n        for (let i = baseLine - brickSideLength + 2; i <= baseLine + 1; i++ ) {\r\n            for ( let a = baseColumn; a < baseColumn + brickSideLength; a++ ) {\r\n                // console.log(i)\r\n                // console.log(a)\r\n                // console.log(i - brickSideLength)\r\n                // console.log(a - baseColumn)\r\n                if (playField[i][a] + movingBrick[i - brickSideLength + 1][a - baseColumn] > 2) {\r\n                    return this.stopBlock(current)\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            playField: current.playField,\r\n            movingBrick: current.movingBrick,\r\n            baseLine: current.baseLine + 1,\r\n            baseColumn: current.baseColumn,\r\n            score: current.score,\r\n            speed: current.speed\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}