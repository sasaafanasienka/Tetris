{"ast":null,"code":"function blockGen() {\n  const numberOfblock = Math.floor(Math.random() * Math.floor(19)); // return blockExamples[0]\n\n  return blockExamples[numberOfblock];\n}\n\nexport function addNewBlock(scheme) {\n  console.log(scheme);\n  console.log('function addNewBlok indahiuse');\n  const block = blockGen();\n  const renderStartPoint = Math.round((10 - block[0].length) / 2);\n\n  for (let i = 0; i < block.length; i++) {\n    for (let a = 0; a < block[i].length; a++) {\n      scheme[i][a + renderStartPoint] = block[i][a];\n    }\n  }\n\n  return scheme;\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/gameEvents/addNewBlock.js"],"names":["blockGen","numberOfblock","Math","floor","random","blockExamples","addNewBlock","scheme","console","log","block","renderStartPoint","round","length","i","a"],"mappings":"AAEA,SAASA,QAAT,GAAoB;AAChB,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,EAAX,CAA3B,CAAtB,CADgB,CAEhB;;AACA,SAAOE,aAAa,CAACJ,aAAD,CAApB;AACH;;AAED,OAAO,SAASK,WAAT,CAAqBC,MAArB,EAA6B;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,QAAMC,KAAK,GAAGV,QAAQ,EAAtB;AACA,QAAMW,gBAAgB,GAAGT,IAAI,CAACU,KAAL,CAAW,CAAC,KAAKF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAf,IAAyB,CAApC,CAAzB;;AACI,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACG,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACI,CAAD,CAAL,CAASD,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACtCR,MAAAA,MAAM,CAACO,CAAD,CAAN,CAAUC,CAAC,GAAGJ,gBAAd,IAAkCD,KAAK,CAACI,CAAD,CAAL,CAASC,CAAT,CAAlC;AACH;AACJ;;AACL,SAAOR,MAAP;AACH","sourcesContent":["\r\n\r\nfunction blockGen() {\r\n    const numberOfblock = Math.floor(Math.random() * Math.floor(19))\r\n    // return blockExamples[0]\r\n    return blockExamples[numberOfblock]\r\n}\r\n\r\nexport function addNewBlock(scheme) {\r\n    console.log(scheme)\r\n    console.log('function addNewBlok indahiuse')\r\n    const block = blockGen();\r\n    const renderStartPoint = Math.round((10 - block[0].length) / 2)\r\n        for (let i = 0; i < block.length; i++) {\r\n            for (let a = 0; a < block[i].length; a++) {\r\n                scheme[i][a + renderStartPoint] = block[i][a]\r\n            }\r\n        }\r\n    return scheme\r\n}"]},"metadata":{},"sourceType":"module"}