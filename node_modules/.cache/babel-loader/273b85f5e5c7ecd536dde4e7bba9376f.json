{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import './Main.sass'\n\nexport default class DataTransform extends React.Component {\n  schemeToArr(scheme) {\n    let newArea = [];\n\n    for (let i = 0; i < 20; i++) {\n      for (let a = 0; a < 10; a++) {\n        newArea.push(scheme[i][a]);\n      }\n    }\n\n    return newArea;\n  }\n\n  arrToScheme(arr) {\n    let newArea = [];\n\n    for (let i = 0; i < 20; i++) {\n      let row = [];\n\n      for (let a = 0; a < 10; a++) {\n        row.push(arr[a + i * 10]);\n      }\n\n      newArea.push(row);\n    }\n\n    return newArea;\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/DataTransform.js"],"names":["React","useState","useEffect","DataTransform","Component","schemeToArr","scheme","newArea","i","a","push","arrToScheme","arr","row"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AAEA,eAAe,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAEvDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBF,QAAAA,OAAO,CAACG,IAAR,CAAaJ,MAAM,CAACE,CAAD,CAAN,CAAUC,CAAV,CAAb;AACP;AAAC;;AACF,WAAOF,OAAP;AACH;;AAEDI,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,QAAIL,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAIK,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBI,QAAAA,GAAG,CAACH,IAAJ,CAASE,GAAG,CAACH,CAAC,GAAGD,CAAC,GAAG,EAAT,CAAZ;AACH;;AACDD,MAAAA,OAAO,CAACG,IAAR,CAAaG,GAAb;AACH;;AAED,WAAON,OAAP;AACH;;AAtBsD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import './Main.sass'\r\n\r\nexport default class DataTransform extends React.Component {\r\n\r\n    schemeToArr(scheme) {\r\n        let newArea = []\r\n        for (let i = 0; i < 20; i++) {\r\n            for (let a = 0; a < 10; a++) {\r\n                newArea.push(scheme[i][a])\r\n        }}\r\n        return newArea\r\n    }\r\n\r\n    arrToScheme(arr) {\r\n        let newArea = []\r\n        for (let i = 0; i < 20; i++) {\r\n            let row = []\r\n            for (let a = 0; a < 10; a++) {\r\n                row.push(arr[a + i * 10])\r\n            }\r\n            newArea.push(row)\r\n        }\r\n        \r\n        return newArea\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}