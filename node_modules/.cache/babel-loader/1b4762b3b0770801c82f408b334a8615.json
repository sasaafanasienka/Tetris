{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import addNewBlock from '../gameEvents/addNewBlock';\n\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class MoveDown extends React.Component {\n  stopBlock(current) {\n    const playField = current.playField;\n    const movingBrick = current.movingBrick;\n    const baseLine = current.baseLine;\n    const baseColumn = current.baseColumn;\n    const brickSideLength = current.movingBrick.length;\n    let newField = [];\n\n    for (let i = 0; i < 24; i++) {\n      if (i <= baseLine - brickSideLength || i > baseLine) {\n        //если в строке нет движущейся фигуры\n        newField.push(playField[i]); //то оставляем поле как есть\n      } else {\n        let newRow = [];\n\n        for (let a = 0; a < 10; a++) {\n          //если движущаяся фигура есть, начинаем првоерять по колонкам\n          if (a < baseColumn || a >= baseColumn + brickSideLength) {\n            //если фигуры нет в колонках\n            newRow.push(playField[i][a]); // тоже оставляем как есть\n          } else {\n            if (movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn] === 1) {\n              //тут данные поля заменяются данными движ фигруы\n              newRow.push(2);\n            } else {\n              newRow.push(0);\n            }\n          }\n        }\n\n        newField.push(newRow);\n      }\n    }\n\n    return {\n      playField: newField,\n      movingBrick: [[1, 1], [1, 1]],\n      baseLine: 3,\n      baseColumn: 3,\n      score: current.score,\n      speed: current.speed\n    };\n  }\n\n  move(current) {\n    const playField = current.playField;\n    const movingBrick = current.movingBrick;\n    const baseLine = current.baseLine;\n    const baseColumn = current.baseColumn;\n    const brickSideLength = current.movingBrick.length;\n    console.log(playField);\n\n    if (baseLine === 23) {\n      return this.stopBlock(current);\n    } else {\n      for (let i = 0; i < brickSideLength; i++) {\n        for (let a = 0; a < brickSideLength; a++) {\n          // console.log(`${movingBrick[i][a]} + ${playField[i + baseLine - brickSideLength + 1][a + baseColumn]}`)\n          console.log(baseLine);\n          console.log(i);\n          console.log(i + baseLine + brickSideLength + 1);\n\n          if (movingBrick[i][a] + playField[i + baseLine][a + baseColumn] > 2) {\n            //было - \n            return this.stopBlock(current);\n          }\n        }\n      }\n    }\n\n    return {\n      playField: playField,\n      movingBrick: movingBrick,\n      baseLine: baseLine + 1,\n      baseColumn: baseColumn,\n      score: current.score,\n      speed: current.speed\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/MoveDown.js"],"names":["React","useState","useEffect","DataTransform","dataTransform","MoveDown","Component","stopBlock","current","playField","movingBrick","baseLine","baseColumn","brickSideLength","length","newField","i","push","newRow","a","score","speed","move","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import addNewBlock from '../gameEvents/addNewBlock';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    stopBlock(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSideLength = current.movingBrick.length\r\n\r\n        let newField = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSideLength || i > baseLine) { //если в строке нет движущейся фигуры\r\n                newField.push(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                let newRow = []\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSideLength ) { //если фигуры нет в колонках\r\n                        newRow.push(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        if (movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn] === 1) { //тут данные поля заменяются данными движ фигруы\r\n                            newRow.push(2)\r\n                        } else {\r\n                            newRow.push(0)\r\n                        }\r\n                    }\r\n                }\r\n                newField.push(newRow)\r\n            }\r\n        }\r\n        return {\r\n            playField: newField,\r\n            movingBrick: [[1,1],[1,1]],\r\n            baseLine: 3,\r\n            baseColumn: 3,\r\n            score: current.score,\r\n            speed: current.speed\r\n        }\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSideLength = current.movingBrick.length\r\n        console.log(playField)\r\n\r\n        if (baseLine === 23) {\r\n            return this.stopBlock(current) \r\n        } else {\r\n            for (let i = 0; i < brickSideLength; i++ ) {\r\n                for ( let a = 0; a < brickSideLength; a++ ) {\r\n                    // console.log(`${movingBrick[i][a]} + ${playField[i + baseLine - brickSideLength + 1][a + baseColumn]}`)\r\n                    console.log(baseLine)\r\n                    console.log(i)\r\n                    console.log(i + baseLine + brickSideLength + 1)\r\n                    if (movingBrick[i][a] + playField[i + baseLine][a + baseColumn] > 2) {  //было - \r\n                        return this.stopBlock(current)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine + 1,\r\n            baseColumn: baseColumn,\r\n            score: current.score,\r\n            speed: current.speed\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}