{"ast":null,"code":"var _jsxFileName = \"D:\\\\FrontEnd\\\\03-tetris\\\\src\\\\components\\\\PlayArea\\\\PlayArea.js\";\nimport React from 'react';\nimport './PlayArea.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlayArea(props) {\n  const playField = props.gameData.playField;\n  const movingBrick = props.gameData.movingBrick;\n  const baseLine = props.gameData.baseLine;\n  const baseColumn = props.gameData.baseColumn;\n  const brickSideLength = props.gameData.movingBrick.length;\n\n  function compileDataToArr() {\n    //сложнючая функция, которая устанавливает фигуру на поле и преобразует все это в единый массив\n    let dataArray = [];\n\n    for (let i = 0; i < 24; i++) {\n      if (i <= baseLine - brickSideLength || i > baseLine) {\n        //если в строке нет движущейся фигуры\n        dataArray = dataArray.concat(playField[i]); //то оставляем поле как есть\n      } else {\n        for (let a = 0; a < 10; a++) {\n          //если движущаяся фигура есть, начинаем првоерять по колонкам\n          if (a < baseColumn || a >= baseColumn + brickSideLength) {\n            //если фигуры нет в колонках\n            dataArray = dataArray.concat(playField[i][a]); // тоже оставляем как есть\n          } else {\n            dataArray = dataArray.concat(movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn] + playField[i][a]); //тут данные поля заменяются данными движ фигруы\n          }\n        }\n      }\n    }\n\n    return dataArray;\n  }\n\n  function renderCells() {\n    let cells = [];\n    let data = compileDataToArr();\n\n    for (let i = 40; i < 240; i++) {\n      if (data[i] === 0) {\n        cells.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"PlayArea__cell\"\n        }, `${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this));\n      } else {\n        cells.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"PlayArea__cell_full\"\n        }, `${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    return cells;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PlayArea\",\n    children: renderCells()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_c = PlayArea;\nexport default PlayArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayArea\");","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/components/PlayArea/PlayArea.js"],"names":["React","PlayArea","props","playField","gameData","movingBrick","baseLine","baseColumn","brickSideLength","length","compileDataToArr","dataArray","i","concat","a","renderCells","cells","data","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAErB,QAAMC,SAAS,GAAGD,KAAK,CAACE,QAAN,CAAeD,SAAjC;AACA,QAAME,WAAW,GAAGH,KAAK,CAACE,QAAN,CAAeC,WAAnC;AACA,QAAMC,QAAQ,GAAGJ,KAAK,CAACE,QAAN,CAAeE,QAAhC;AACA,QAAMC,UAAU,GAAGL,KAAK,CAACE,QAAN,CAAeG,UAAlC;AACA,QAAMC,eAAe,GAAGN,KAAK,CAACE,QAAN,CAAeC,WAAf,CAA2BI,MAAnD;;AAEA,WAASC,gBAAT,GAA4B;AAAE;AAC1B,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,UAAIA,CAAC,IAAIN,QAAQ,GAAGE,eAAhB,IAAmCI,CAAC,GAAGN,QAA3C,EAAqD;AAAE;AACnDK,QAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiBV,SAAS,CAACS,CAAD,CAA1B,CAAZ,CADiD,CACN;AAC9C,OAFD,MAEO;AACH,aAAM,IAAIE,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA+B;AAAE;AAC7B,cAAKA,CAAC,GAAGP,UAAJ,IAAkBO,CAAC,IAAIP,UAAU,GAAGC,eAAzC,EAA2D;AAAE;AACzDG,YAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiBV,SAAS,CAACS,CAAD,CAAT,CAAaE,CAAb,CAAjB,CAAZ,CADuD,CACR;AAClD,WAFD,MAEO;AACHH,YAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiBR,WAAW,CAACO,CAAC,GAAGN,QAAJ,GAAeE,eAAf,GAAiC,CAAlC,CAAX,CAAgDM,CAAC,GAAGP,UAApD,IAAkEJ,SAAS,CAACS,CAAD,CAAT,CAAaE,CAAb,CAAnF,CAAZ,CADG,CAC6G;AACnH;AACJ;AACJ;AACJ;;AACD,WAAOH,SAAP;AACH;;AAED,WAASI,WAAT,GAAuB;AACnB,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,IAAI,GAAGP,gBAAgB,EAA3B;;AACA,SAAK,IAAIE,CAAC,GAAG,EAAb,EAAiBA,CAAC,GAAG,GAArB,EAA0BA,CAAC,EAA3B,EAA+B;AAC3B,UAAIK,IAAI,CAACL,CAAD,CAAJ,KAAY,CAAhB,EAAmB;AACfI,QAAAA,KAAK,CAACE,IAAN,eACI;AAAK,UAAA,SAAS,EAAC;AAAf,WAAsC,GAAEN,CAAE,EAA1C;AAAA;AAAA;AAAA;AAAA,gBADJ;AAEF,OAHF,MAGQ;AACJI,QAAAA,KAAK,CAACE,IAAN,eACI;AAAK,UAAA,SAAS,EAAC;AAAf,WAA2C,GAAEN,CAAE,EAA/C;AAAA;AAAA;AAAA;AAAA,gBADJ;AAEF;AACL;;AACD,WAAOI,KAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cACKD,WAAW;AADhB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KA9CQd,Q;AAgDT,eAAeA,QAAf","sourcesContent":["import React from 'react';\r\nimport './PlayArea.sass'\r\n\r\nfunction PlayArea(props) {\r\n\r\n    const playField = props.gameData.playField\r\n    const movingBrick = props.gameData.movingBrick\r\n    const baseLine = props.gameData.baseLine\r\n    const baseColumn = props.gameData.baseColumn\r\n    const brickSideLength = props.gameData.movingBrick.length\r\n\r\n    function compileDataToArr() { //сложнючая функция, которая устанавливает фигуру на поле и преобразует все это в единый массив\r\n        let dataArray = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSideLength || i > baseLine) { //если в строке нет движущейся фигуры\r\n                dataArray = dataArray.concat(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSideLength ) { //если фигуры нет в колонках\r\n                        dataArray = dataArray.concat(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        dataArray = dataArray.concat(movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn] + playField[i][a]) //тут данные поля заменяются данными движ фигруы\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dataArray\r\n    }\r\n\r\n    function renderCells() {\r\n        let cells = []\r\n        let data = compileDataToArr()\r\n        for (let i = 40; i < 240; i++) {\r\n            if (data[i] === 0) {\r\n                cells.push(\r\n                    <div className='PlayArea__cell' key={`${i}`}></div>\r\n            )} else {\r\n                cells.push(\r\n                    <div className='PlayArea__cell_full' key={`${i}`}></div>\r\n            )}\r\n        }\r\n        return cells\r\n    }\r\n\r\n    return(\r\n        <div className=\"PlayArea\">\r\n            {renderCells()}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default PlayArea;"]},"metadata":{},"sourceType":"module"}