{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport freePlaceToMove from '../checks/freePlaceToMove';\nimport randomBlock from '../gameEvents/randomBlock';\nlet dataTransform = new DataTransform();\nexport default class MoveDown extends React.Component {\n  stopBlock(current) {\n    const playField = current.playField;\n    const movingBrick = current.movingBrick;\n    const baseLine = current.baseLine;\n    const baseColumn = current.baseColumn;\n    const brickSize = current.movingBrick.length;\n    let newField = [];\n\n    for (let i = 0; i < 24; i++) {\n      if (i <= baseLine - brickSize || i > baseLine) {\n        //если в строке нет движущейся фигуры\n        newField.push(playField[i]); //то оставляем поле как есть\n      } else {\n        let newRow = [];\n\n        for (let a = 0; a < 10; a++) {\n          //если движущаяся фигура есть, начинаем првоерять по колонкам\n          if (a < baseColumn || a >= baseColumn + brickSize) {\n            //если фигуры нет в колонках\n            newRow.push(playField[i][a]); // тоже оставляем как есть\n          } else {\n            if (movingBrick[i - baseLine + brickSize - 1][a - baseColumn] === 1) {\n              //тут данные поля заменяются данными движ фигруы\n              newRow.push(2);\n            } else {\n              newRow.push(playField[i][a]);\n            }\n          }\n        }\n\n        newField.push(newRow);\n      }\n    }\n\n    const newBrick = randomBlock();\n    return {\n      playField: newField,\n      movingBrick: newBrick.brick,\n      baseLine: 3,\n      baseColumn: newBrick.baseColumn,\n      score: current.score,\n      speed: current.speed,\n      gemeStatus: current.gemeStatus\n    };\n  }\n\n  move(current) {\n    const playField = current.playField;\n    const movingBrick = current.movingBrick;\n    const baseLine = current.baseLine + 1;\n    const baseColumn = current.baseColumn;\n    const brickSize = current.movingBrick.length;\n\n    if (baseLine > 23) {\n      return this.stopBlock(current);\n    } else {\n      if (freePlaceToMove(playField, movingBrick, baseLine, baseColumn, brickSize) === false) {\n        return this.stopBlock(current);\n      }\n    }\n\n    return {\n      playField: playField,\n      movingBrick: movingBrick,\n      baseLine: baseLine,\n      baseColumn: baseColumn,\n      score: current.score,\n      speed: current.speed,\n      gemeStatus: current.gemeStatus\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/MoveDown.js"],"names":["React","useState","useEffect","freePlaceToMove","randomBlock","dataTransform","DataTransform","MoveDown","Component","stopBlock","current","playField","movingBrick","baseLine","baseColumn","brickSize","length","newField","i","push","newRow","a","newBrick","brick","score","speed","gemeStatus","move"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\nimport randomBlock from '../gameEvents/randomBlock'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    stopBlock(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        let newField = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSize || i > baseLine) { //если в строке нет движущейся фигуры\r\n                newField.push(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                let newRow = []\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSize ) { //если фигуры нет в колонках\r\n                        newRow.push(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        if (movingBrick[i - baseLine + brickSize - 1][a - baseColumn] === 1) { //тут данные поля заменяются данными движ фигруы\r\n                            newRow.push(2)\r\n                        } else {\r\n                            newRow.push(playField[i][a])\r\n                        }\r\n                    }\r\n                }\r\n                newField.push(newRow)\r\n            }\r\n        }\r\n\r\n        const newBrick = randomBlock()\r\n\r\n        return {\r\n            playField: newField,\r\n            movingBrick: newBrick.brick,\r\n            baseLine: 3,\r\n            baseColumn: newBrick.baseColumn,\r\n            score: current.score,\r\n            speed: current.speed,\r\n            gemeStatus: current.gemeStatus\r\n        }\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine + 1\r\n        const baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if (baseLine > 23) {\r\n            return this.stopBlock(current) \r\n        } else {\r\n            if(freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n                return this.stopBlock(current)\r\n            }\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            score: current.score,\r\n            speed: current.speed,\r\n            gemeStatus: current.gemeStatus\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}