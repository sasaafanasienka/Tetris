{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import './Main.sass'\n\nexport default class Move extends React.Component {\n  // constructor() {\n  //     this.state = {\n  //         area: this.area,\n  //     }\n  // }\n  transformSchemeToArr(scheme) {\n    let newArea = [];\n\n    for (let i = 0; i < 20; i++) {\n      for (let a = 0; a < 10; a++) {\n        newArea.push(scheme[i][a]);\n      }\n    }\n\n    return newArea;\n  }\n\n  transFormArrToSCheme(arr) {\n    let newArea = [];\n\n    for (let i = 0; i < 20; i++) {\n      let row = [];\n\n      for (let a = 0; a < 10; a++) {\n        row.push(arr[a + i * 10]);\n      }\n\n      newArea.push(row);\n    }\n\n    return newArea;\n  }\n\n  down(scheme) {\n    const newArea = this.transformSchemeToArr(scheme);\n    const oldArea = this.transformSchemeToArr(scheme);\n\n    for (let i = newArea.length; i >= 0; i--) {\n      if (newArea[i] === 1) {\n        if (i + 10 < 200 || newArea[i + 10] === 0) {\n          newArea[i] = 0;\n          newArea[i + 10] = 1;\n        } else {\n          oldArea.forEach(el => {\n            if (el === 1) {\n              el = 2;\n            }\n          });\n          console.log(oldArea);\n          return this.transFormArrToSCheme(oldArea);\n        }\n      }\n    }\n\n    return this.transFormArrToSCheme(newArea);\n  }\n\n  right(scheme) {\n    const newArea = this.transformSchemeToArr(scheme);\n    const oldArea = this.transformSchemeToArr(scheme);\n\n    for (let i = newArea.length; i >= 0; i--) {\n      if (newArea[i] === 1) {\n        if (i.toString().slice(-1) !== '9') {\n          newArea[i] = 0;\n          newArea[i + 1] = 1;\n        } else {\n          return this.transFormArrToSCheme(oldArea);\n        }\n      }\n    }\n\n    return this.transFormArrToSCheme(newArea);\n  }\n\n  left(scheme) {\n    const newArea = this.transformSchemeToArr(scheme);\n    const oldArea = this.transformSchemeToArr(scheme);\n\n    for (let i = 0; i < newArea.length; i++) {\n      if (newArea[i] === 1) {\n        if (i.toString().slice(-1) !== '0') {\n          newArea[i] = 0;\n          newArea[i - 1] = 1;\n        } else {\n          return this.transFormArrToSCheme(oldArea);\n        }\n      }\n    }\n\n    return this.transFormArrToSCheme(newArea);\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/userEvents/Move.js"],"names":["React","useState","useEffect","Move","Component","transformSchemeToArr","scheme","newArea","i","a","push","transFormArrToSCheme","arr","row","down","oldArea","length","forEach","el","console","log","right","toString","slice","left"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import './Main.sass'\r\n\r\nexport default class Move extends React.Component {\r\n\r\n    // constructor() {\r\n    //     this.state = {\r\n    //         area: this.area,\r\n    //     }\r\n    // }\r\n    transformSchemeToArr(scheme) {\r\n        let newArea = []\r\n        for (let i = 0; i < 20; i++) {\r\n            for (let a = 0; a < 10; a++) {\r\n                newArea.push(scheme[i][a])\r\n            }\r\n        }\r\n        return newArea\r\n    }\r\n\r\n    transFormArrToSCheme(arr) {\r\n        let newArea = []\r\n        for (let i = 0; i < 20; i++) {\r\n            let row = []\r\n            for (let a = 0; a < 10; a++) {\r\n                row.push(arr[a + i * 10])\r\n            }\r\n            newArea.push(row)\r\n        }\r\n        return newArea\r\n    }\r\n\r\n    down(scheme) {\r\n        const newArea = this.transformSchemeToArr(scheme)\r\n        const oldArea = this.transformSchemeToArr(scheme)\r\n        for (let i = newArea.length; i >= 0; i--) {\r\n            if (newArea[i] === 1) {\r\n                if (i + 10 < 200 || newArea[i + 10] === 0) {\r\n                    newArea[i] = 0;\r\n                    newArea[i + 10] = 1;\r\n                } else {\r\n                    oldArea.forEach(el => {\r\n                        if (el === 1) {\r\n                            el = 2\r\n                            \r\n                        }\r\n                    })\r\n                    console.log(oldArea)\r\n                    return this.transFormArrToSCheme(oldArea)\r\n                }\r\n            }\r\n        }\r\n        return this.transFormArrToSCheme(newArea)\r\n    }\r\n\r\n    right(scheme) {\r\n        const newArea = this.transformSchemeToArr(scheme)\r\n        const oldArea = this.transformSchemeToArr(scheme)\r\n        for (let i = newArea.length; i >= 0; i--) {\r\n            if (newArea[i] === 1) {\r\n                if (i.toString().slice(-1) !== '9') {\r\n                    newArea[i] = 0;\r\n                    newArea[i + 1] = 1;\r\n                } else {\r\n                    return this.transFormArrToSCheme(oldArea)\r\n                }\r\n            }\r\n        }\r\n        return this.transFormArrToSCheme(newArea)\r\n    }\r\n\r\n    left(scheme) {\r\n        const newArea = this.transformSchemeToArr(scheme)\r\n        const oldArea = this.transformSchemeToArr(scheme)\r\n        for (let i = 0; i < newArea.length; i++) {\r\n            if (newArea[i] === 1) {\r\n                if (i.toString().slice(-1) !== '0') {\r\n                    newArea[i] = 0;\r\n                    newArea[i - 1] = 1;\r\n                } else {\r\n                    return this.transFormArrToSCheme(oldArea)\r\n                }\r\n            }\r\n        }\r\n        return this.transFormArrToSCheme(newArea)\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}