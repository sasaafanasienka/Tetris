{"ast":null,"code":"import React, { useState, useEffect } from 'react'; // import addNewBlock from '../gameEvents/addNewBlock';\n\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class Rotate extends React.Component {\n  move(currentArea) {\n    let newArea = [];\n    let stoppedBlocks = currentArea.map(el => {\n      return el === 2 ? el = 2 : el = 0;\n    });\n    let movingBlocks = currentArea.map(el => {\n      return el === 1 ? el = 1 : el = 0;\n    });\n    const areaScheme = dataTransform.arrToScheme(movingBlocks);\n    const rotatedAreaScheme = [];\n\n    for (let i = 0; i < 10; i++) {\n      let newRow = [];\n\n      for (let a = 0; a < 24; a++) {\n        newRow.push(areaScheme[a][i]);\n      }\n\n      rotatedAreaScheme.push(newRow);\n    }\n\n    let startColumn = 0;\n    let rotatedWithoutEmptyRows = [];\n\n    for (let b = 9; b >= 0; b--) {\n      if (rotatedAreaScheme.includes(1)) {\n        rotatedWithoutEmptyRows.push(rotatedWithoutEmptyRows[b]);\n        startColumn = b;\n      }\n    }\n\n    console.log(rotatedAreaScheme);\n\n    if (movingBlocks.slice(-10).includes(1)) {\n      return this.stopBlock(currentArea);\n    } else {\n      movingBlocks.splice(230);\n      movingBlocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].concat(movingBlocks);\n    }\n\n    for (let i = 0; i < 240; i++) {\n      const sum = stoppedBlocks[i] + movingBlocks[i];\n\n      if (sum <= 2) {\n        newArea.push(sum);\n      } else {\n        return this.stopBlock(currentArea);\n      }\n    }\n\n    return newArea;\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/Rotate.js"],"names":["React","useState","useEffect","DataTransform","dataTransform","Rotate","Component","move","currentArea","newArea","stoppedBlocks","map","el","movingBlocks","areaScheme","arrToScheme","rotatedAreaScheme","i","newRow","a","push","startColumn","rotatedWithoutEmptyRows","b","includes","console","log","slice","stopBlock","splice","concat","sum"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAIC,aAAa,GAAG,IAAID,aAAJ,EAApB;AAEA,eAAe,MAAME,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAEhDC,EAAAA,IAAI,CAACC,WAAD,EAAc;AACd,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,aAAa,GAAGF,WAAW,CAACG,GAAZ,CAAiBC,EAAD,IAAQ;AACxC,aAAOA,EAAE,KAAK,CAAP,GAAWA,EAAE,GAAG,CAAhB,GAAoBA,EAAE,GAAG,CAAhC;AACH,KAFmB,CAApB;AAGA,QAAIC,YAAY,GAAGL,WAAW,CAACG,GAAZ,CAAiBC,EAAD,IAAQ;AACvC,aAAOA,EAAE,KAAK,CAAP,GAAWA,EAAE,GAAG,CAAhB,GAAoBA,EAAE,GAAG,CAAhC;AACH,KAFkB,CAAnB;AAGA,UAAME,UAAU,GAAGV,aAAa,CAACW,WAAd,CAA0BF,YAA1B,CAAnB;AACA,UAAMG,iBAAiB,GAAG,EAA1B;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA+B;AAC3B,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYN,UAAU,CAACK,CAAD,CAAV,CAAcF,CAAd,CAAZ;AACH;;AACDD,MAAAA,iBAAiB,CAACI,IAAlB,CAAuBF,MAAvB;AACH;;AACD,QAAIG,WAAW,GAAG,CAAlB;AACA,QAAIC,uBAAuB,GAAG,EAA9B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1B,UAAIP,iBAAiB,CAACQ,QAAlB,CAA2B,CAA3B,CAAJ,EAAmC;AAC/BF,QAAAA,uBAAuB,CAACF,IAAxB,CAA6BE,uBAAuB,CAACC,CAAD,CAApD;AACAF,QAAAA,WAAW,GAAGE,CAAd;AACH;AACJ;;AAMDE,IAAAA,OAAO,CAACC,GAAR,CAAYV,iBAAZ;;AACA,QAAIH,YAAY,CAACc,KAAb,CAAmB,CAAC,EAApB,EAAwBH,QAAxB,CAAiC,CAAjC,CAAJ,EAAyC;AACrC,aAAO,KAAKI,SAAL,CAAepB,WAAf,CAAP;AACH,KAFD,MAEO;AACHK,MAAAA,YAAY,CAACgB,MAAb,CAAoB,GAApB;AACAhB,MAAAA,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BiB,MAA/B,CAAsCjB,YAAtC,CAAf;AACH;;AACD,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,YAAMc,GAAG,GAAGrB,aAAa,CAACO,CAAD,CAAb,GAAmBJ,YAAY,CAACI,CAAD,CAA3C;;AACA,UAAIc,GAAG,IAAI,CAAX,EAAc;AACVtB,QAAAA,OAAO,CAACW,IAAR,CAAaW,GAAb;AACH,OAFD,MAEO;AACH,eAAO,KAAKH,SAAL,CAAepB,WAAf,CAAP;AACH;AACJ;;AACD,WAAOC,OAAP;AACH;;AAhD+C","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import addNewBlock from '../gameEvents/addNewBlock';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class Rotate extends React.Component {\r\n\r\n    move(currentArea) {\r\n        let newArea = []\r\n        let stoppedBlocks = currentArea.map((el) => {\r\n            return el === 2 ? el = 2 : el = 0\r\n        })\r\n        let movingBlocks = currentArea.map((el) => {\r\n            return el === 1 ? el = 1 : el = 0\r\n        })\r\n        const areaScheme = dataTransform.arrToScheme(movingBlocks)\r\n        const rotatedAreaScheme = []\r\n        for ( let i = 0; i < 10; i++ ) {\r\n            let newRow = []\r\n            for (let a = 0; a < 24; a++) {\r\n                newRow.push(areaScheme[a][i])\r\n            }\r\n            rotatedAreaScheme.push(newRow)\r\n        }\r\n        let startColumn = 0\r\n        let rotatedWithoutEmptyRows = []\r\n        for (let b = 9; b >= 0; b-- ) {\r\n            if (rotatedAreaScheme.includes(1)) {\r\n                rotatedWithoutEmptyRows.push(rotatedWithoutEmptyRows[b])\r\n                startColumn = b\r\n            }\r\n        }\r\n        \r\n\r\n        \r\n\r\n\r\n        console.log(rotatedAreaScheme)\r\n        if (movingBlocks.slice(-10).includes(1)) {\r\n            return this.stopBlock(currentArea)\r\n        } else {\r\n            movingBlocks.splice(230)\r\n            movingBlocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].concat(movingBlocks)\r\n        }\r\n        for (let i = 0; i < 240; i++) {\r\n            const sum = stoppedBlocks[i] + movingBlocks[i]\r\n            if (sum <= 2) {\r\n                newArea.push(sum)\r\n            } else {\r\n                return this.stopBlock(currentArea)\r\n            }\r\n        }\r\n        return newArea\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}