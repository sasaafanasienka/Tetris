{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class Move extends React.Component {\n  move(scheme) {\n    const newArea = dataTransform.schemeToArr(scheme);\n    const oldArea = dataTransform.schemeToArr(scheme);\n\n    for (let i = newArea.length; i >= 0; i--) {\n      if (newArea[i] === 1) {\n        if (i.toString().slice(-1) !== '9') {\n          newArea[i] = 0;\n          newArea[i + 1] = 1;\n        } else {\n          return dataTransform.arrToScheme(oldArea);\n        }\n      }\n    }\n\n    return dataTransform.arrToScheme(newArea);\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/MoveRight.js"],"names":["React","useState","useEffect","DataTransform","dataTransform","Move","Component","move","scheme","newArea","schemeToArr","oldArea","i","length","toString","slice","arrToScheme"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAIC,aAAa,GAAG,IAAID,aAAJ,EAApB;AAEA,eAAe,MAAME,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAE9CC,EAAAA,IAAI,CAACC,MAAD,EAAS;AACT,UAAMC,OAAO,GAAGL,aAAa,CAACM,WAAd,CAA0BF,MAA1B,CAAhB;AACA,UAAMG,OAAO,GAAGP,aAAa,CAACM,WAAd,CAA0BF,MAA1B,CAAhB;;AACA,SAAK,IAAII,CAAC,GAAGH,OAAO,CAACI,MAArB,EAA6BD,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACtC,UAAIH,OAAO,CAACG,CAAD,CAAP,KAAe,CAAnB,EAAsB;AAClB,YAAIA,CAAC,CAACE,QAAF,GAAaC,KAAb,CAAmB,CAAC,CAApB,MAA2B,GAA/B,EAAoC;AAChCN,UAAAA,OAAO,CAACG,CAAD,CAAP,GAAa,CAAb;AACAH,UAAAA,OAAO,CAACG,CAAC,GAAG,CAAL,CAAP,GAAiB,CAAjB;AACH,SAHD,MAGO;AACH,iBAAOR,aAAa,CAACY,WAAd,CAA0BL,OAA1B,CAAP;AACH;AACJ;AACJ;;AACD,WAAOP,aAAa,CAACY,WAAd,CAA0BP,OAA1B,CAAP;AACH;;AAhB6C","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class Move extends React.Component {\r\n\r\n    move(scheme) {\r\n        const newArea = dataTransform.schemeToArr(scheme)\r\n        const oldArea = dataTransform.schemeToArr(scheme)\r\n        for (let i = newArea.length; i >= 0; i--) {\r\n            if (newArea[i] === 1) {\r\n                if (i.toString().slice(-1) !== '9') {\r\n                    newArea[i] = 0;\r\n                    newArea[i + 1] = 1;\r\n                } else {\r\n                    return dataTransform.arrToScheme(oldArea)\r\n                }\r\n            }\r\n        }\r\n        return dataTransform.arrToScheme(newArea)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}