{"ast":null,"code":"var _jsxFileName = \"D:\\\\FrontEnd\\\\03-tetris\\\\src\\\\components\\\\Main\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Main.sass';\nimport PlayArea from '../PlayArea/PlayArea';\nimport emptyArea from '../../constants/emptyArea';\nimport blockGen from '../../gameEvents/blockGen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  console.log(emptyArea);\n  React.useEffect(() => {\n    document.addEventListener(\"keypress\", changeOnArea);\n    return () => {\n      document.removeEventListener(\"keypress\", changeOnArea);\n    };\n  });\n\n  function newBlock() {\n    const block = blockGen();\n    const renderStartPoint = Math.round((10 - block.length) / 2);\n\n    for (let i = 0; i < block.length; i++) {\n      for (let a = 0; a < block[i].length; a++) {\n        emptyArea[i][a + renderStartPoint] = 1;\n      }\n    }\n  }\n\n  newBlock();\n\n  function moveBlock() {\n    console.log(1);\n\n    for (let i = 19; i >= 0; i--) {\n      var indices = [];\n      var array = emptyArea[i];\n      var element = 1;\n      var idx = array.indexOf(element);\n\n      while (idx != -1) {\n        indices.push(idx);\n        idx = array.indexOf(element, idx + 1);\n      }\n\n      console.log(indices);\n    } // var indices = [];\n    // var array = emptyArea;\n    // var element = 1;\n    // var idx = array.indexOf(element);\n    // while (idx != -1) {\n    // indices.push(idx);\n    // idx = array.indexOf(element, idx + 1);\n    // }\n    // console.log(indices);\n\n  }\n\n  moveBlock();\n  const [area, changeArea] = useState({\n    scheme: emptyArea\n  });\n\n  function changeOnArea(event) {\n    if (event.code === 'Numpad8') {\n      let newArea = area.array;\n      let oldCell = newArea.indexOf(1);\n      newArea[oldCell] = 0;\n      newArea[oldCell - 10] = 1;\n      changeArea({\n        array: newArea\n      });\n    } else if (event.code === 'Numpad5') {\n      let newArea = area.array;\n      let oldCell = newArea.indexOf(1);\n      newArea[oldCell] = 0;\n      newArea[oldCell + 10] = 1;\n      changeArea({\n        array: newArea\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"Main\",\n    onKeyPress: changeOnArea,\n    children: /*#__PURE__*/_jsxDEV(PlayArea, {\n      gameData: area.scheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"iJeHyzm5OPVol09IM8ZI+LbKfeQ=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/components/Main/Main.js"],"names":["React","useState","useEffect","PlayArea","emptyArea","blockGen","Main","console","log","document","addEventListener","changeOnArea","removeEventListener","newBlock","block","renderStartPoint","Math","round","length","i","a","moveBlock","indices","array","element","idx","indexOf","push","area","changeArea","scheme","event","code","newArea","oldCell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Main.sass'\r\nimport PlayArea from '../PlayArea/PlayArea'\r\nimport emptyArea from '../../constants/emptyArea'\r\nimport blockGen from '../../gameEvents/blockGen'\r\n\r\nfunction Main() {\r\n    \r\n    console.log(emptyArea)\r\n    \r\n    React.useEffect(() => {\r\n        document.addEventListener(\"keypress\", changeOnArea);\r\n        return () => {\r\n        document.removeEventListener(\"keypress\", changeOnArea);\r\n        }\r\n    })\r\n\r\n    function newBlock() {\r\n        const block = blockGen();\r\n        const renderStartPoint = Math.round((10 - block.length) / 2)\r\n            for (let i = 0; i < block.length; i++) {\r\n                for (let a = 0; a < block[i].length; a++) {\r\n                    emptyArea[i][a + renderStartPoint] = 1\r\n                }\r\n            }\r\n    }\r\n\r\n    newBlock()\r\n\r\n    function moveBlock() {\r\n        console.log(1)\r\n        for (let i = 19; i >= 0; i--) {\r\n            var indices = [];\r\n            var array = emptyArea[i];\r\n            var element = 1;\r\n            var idx = array.indexOf(element);\r\n            while (idx != -1) {\r\n            indices.push(idx);\r\n            idx = array.indexOf(element, idx + 1);\r\n            }\r\n\r\n            console.log(indices);\r\n        }\r\n        // var indices = [];\r\n        // var array = emptyArea;\r\n        // var element = 1;\r\n        // var idx = array.indexOf(element);\r\n        // while (idx != -1) {\r\n        // indices.push(idx);\r\n        // idx = array.indexOf(element, idx + 1);\r\n        // }\r\n\r\n        // console.log(indices);\r\n    }\r\n\r\n    moveBlock()\r\n\r\n    const [ area, changeArea ] = useState({scheme: emptyArea})\r\n\r\n    function changeOnArea(event) {\r\n        if (event.code === 'Numpad8') {\r\n            let newArea = area.array;\r\n            let oldCell = newArea.indexOf(1)\r\n            newArea[oldCell] = 0\r\n            newArea[oldCell - 10] = 1\r\n            changeArea({array: newArea})\r\n        } else if (event.code === 'Numpad5') {\r\n            let newArea = area.array;\r\n            let oldCell = newArea.indexOf(1)\r\n            newArea[oldCell] = 0\r\n            newArea[oldCell + 10] = 1\r\n            changeArea({array: newArea})\r\n        }\r\n    }\r\n\r\n    return(\r\n        <main className=\"Main\" onKeyPress={changeOnArea}>\r\n            <PlayArea gameData={area.scheme}/>\r\n        </main>\r\n        )\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}