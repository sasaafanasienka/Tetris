{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport addNewBlock from '../gameEvents/addNewBlock';\nimport DataTransform from './DataTransform';\nlet dataTransform = new DataTransform();\nexport default class MoveDown extends React.Component {\n  stopBlock(area) {\n    return area.map(function (el) {\n      if (el === 1) {\n        return el = 2;\n      } else {\n        return el;\n      }\n    });\n  }\n\n  removeFullRows(area) {\n    let filteredArea = area.filter(row => {\n      return row.some(el => {\n        return el === 0;\n      });\n    }); // console.log(filteredArea)\n    // for (let i = 0; i < 20 - filteredArea.length; i++) {\n    //     filteredArea.unShift([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    // }\n\n    return area;\n  }\n\n  move(scheme) {\n    const newArea = dataTransform.schemeToArr(scheme);\n\n    for (let i = newArea.length; i >= 0; i--) {\n      if (newArea[i] === 1) {\n        if (i + 10 < 200 && newArea[i + 10] === 0) {\n          newArea[i] = 0;\n          newArea[i + 10] = 1;\n        } else {\n          const currentArea = dataTransform.schemeToArr(scheme);\n          let areaToRender = this.stopBlock(currentArea);\n          console.log(areaToRender);\n          areaToRender = dataTransform.arrToScheme(areaToRender);\n          console.log(areaToRender); // areaToRender = this.removeFullRows(areaToRender)\n\n          areaToRender = addNewBlock(areaToRender);\n          return areaToRender;\n        }\n      }\n    }\n\n    return dataTransform.arrToScheme(newArea);\n  }\n\n}","map":{"version":3,"sources":["D:/FrontEnd/03-tetris/src/blockMoves/MoveDown.js"],"names":["React","useState","useEffect","addNewBlock","DataTransform","dataTransform","MoveDown","Component","stopBlock","area","map","el","removeFullRows","filteredArea","filter","row","some","move","scheme","newArea","schemeToArr","i","length","currentArea","areaToRender","console","log","arrToScheme"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,IAAIC,aAAa,GAAG,IAAID,aAAJ,EAApB;AAEA,eAAe,MAAME,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAElDC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACZ,WAAOA,IAAI,CAACC,GAAL,CAAS,UAASC,EAAT,EAAa;AACzB,UAAIA,EAAE,KAAK,CAAX,EAAc;AAAE,eAAOA,EAAE,GAAG,CAAZ;AAAgB,OAAhC,MAAsC;AAAE,eAAOA,EAAP;AAAW;AACtD,KAFM,CAAP;AAGH;;AAEDC,EAAAA,cAAc,CAACH,IAAD,EAAO;AACjB,QAAII,YAAY,GAAGJ,IAAI,CAACK,MAAL,CAAaC,GAAD,IAAS;AACpC,aAAOA,GAAG,CAACC,IAAJ,CAAUL,EAAD,IAAQ;AACpB,eAAOA,EAAE,KAAK,CAAd;AACH,OAFM,CAAP;AAGH,KAJkB,CAAnB,CADiB,CAMjB;AACA;AACA;AACA;;AACA,WAAOF,IAAP;AACH;;AAEDQ,EAAAA,IAAI,CAACC,MAAD,EAAS;AACT,UAAMC,OAAO,GAAGd,aAAa,CAACe,WAAd,CAA0BF,MAA1B,CAAhB;;AACA,SAAK,IAAIG,CAAC,GAAGF,OAAO,CAACG,MAArB,EAA6BD,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACtC,UAAIF,OAAO,CAACE,CAAD,CAAP,KAAe,CAAnB,EAAsB;AAClB,YAAIA,CAAC,GAAG,EAAJ,GAAS,GAAT,IAAgBF,OAAO,CAACE,CAAC,GAAG,EAAL,CAAP,KAAoB,CAAxC,EAA2C;AACvCF,UAAAA,OAAO,CAACE,CAAD,CAAP,GAAa,CAAb;AACAF,UAAAA,OAAO,CAACE,CAAC,GAAG,EAAL,CAAP,GAAkB,CAAlB;AACH,SAHD,MAGO;AACH,gBAAME,WAAW,GAAGlB,aAAa,CAACe,WAAd,CAA0BF,MAA1B,CAApB;AACA,cAAIM,YAAY,GAAG,KAAKhB,SAAL,CAAee,WAAf,CAAnB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAA,UAAAA,YAAY,GAAGnB,aAAa,CAACsB,WAAd,CAA0BH,YAA1B,CAAf;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EALG,CAMH;;AACAA,UAAAA,YAAY,GAAGrB,WAAW,CAACqB,YAAD,CAA1B;AACA,iBAAOA,YAAP;AACH;AACJ;AACJ;;AACD,WAAOnB,aAAa,CAACsB,WAAd,CAA0BR,OAA1B,CAAP;AACH;;AAzCiD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport addNewBlock from '../gameEvents/addNewBlock';\r\nimport DataTransform from './DataTransform'\r\nlet dataTransform = new DataTransform()\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    stopBlock(area) {\r\n        return area.map(function(el) {\r\n            if (el === 1) { return el = 2; } else { return el }\r\n        });\r\n    }\r\n\r\n    removeFullRows(area) {\r\n        let filteredArea = area.filter((row) => {\r\n            return row.some((el) => {\r\n                return el === 0\r\n            })\r\n        })\r\n        // console.log(filteredArea)\r\n        // for (let i = 0; i < 20 - filteredArea.length; i++) {\r\n        //     filteredArea.unShift([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n        // }\r\n        return area\r\n    }\r\n\r\n    move(scheme) {\r\n        const newArea = dataTransform.schemeToArr(scheme)\r\n        for (let i = newArea.length; i >= 0; i--) {\r\n            if (newArea[i] === 1) {\r\n                if (i + 10 < 200 && newArea[i + 10] === 0) {\r\n                    newArea[i] = 0;\r\n                    newArea[i + 10] = 1;\r\n                } else {\r\n                    const currentArea = dataTransform.schemeToArr(scheme)\r\n                    let areaToRender = this.stopBlock(currentArea)\r\n                    console.log(areaToRender)\r\n                    areaToRender = dataTransform.arrToScheme(areaToRender)\r\n                    console.log(areaToRender)\r\n                    // areaToRender = this.removeFullRows(areaToRender)\r\n                    areaToRender = addNewBlock(areaToRender)\r\n                    return areaToRender\r\n                }\r\n            }\r\n        }\r\n        return dataTransform.arrToScheme(newArea)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}