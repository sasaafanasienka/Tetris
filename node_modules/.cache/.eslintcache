[{"D:\\FrontEnd\\03-tetris\\src\\index.js":"1","D:\\FrontEnd\\03-tetris\\src\\App.js":"2","D:\\FrontEnd\\03-tetris\\src\\reportWebVitals.js":"3","D:\\FrontEnd\\03-tetris\\src\\components\\Main\\Main.js":"4","D:\\FrontEnd\\03-tetris\\src\\components\\PlayArea\\PlayArea.js":"5","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveRight.js":"6","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveLeft.js":"7","D:\\FrontEnd\\03-tetris\\src\\components\\Controls\\Controls.js":"8","D:\\FrontEnd\\03-tetris\\src\\components\\Stat\\Stat.js":"9","D:\\FrontEnd\\03-tetris\\src\\constants\\blockExamples.js":"10","D:\\FrontEnd\\03-tetris\\src\\components\\GameProcess\\GameProcess.js":"11","D:\\FrontEnd\\03-tetris\\src\\checks\\FullRows.js":"12","D:\\FrontEnd\\03-tetris\\src\\gameEvents\\removeFullRows.js":"13","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\Rotate.js":"14","D:\\FrontEnd\\03-tetris\\src\\constants\\emptyField.js":"15","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveDown.js":"16","D:\\FrontEnd\\03-tetris\\src\\checks\\freePlaceToMove.js":"17","D:\\FrontEnd\\03-tetris\\src\\checks\\fullRows.js":"18","D:\\FrontEnd\\03-tetris\\src\\constants\\scoreTable.js":"19","D:\\FrontEnd\\03-tetris\\src\\checks\\youLose.js":"20","D:\\FrontEnd\\03-tetris\\src\\utilits\\randomBlock.js":"21","D:\\FrontEnd\\03-tetris\\src\\gameEvents\\addNewBrick.js":"22","D:\\FrontEnd\\03-tetris\\src\\components\\Queue\\Queue.js":"23","D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\GameProcess.js":"24","D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\gameProcess.js":"25"},{"size":517,"mtime":1616493659852,"results":"26","hashOfConfig":"27"},{"size":336,"mtime":1616493659836,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1616493659853,"results":"29","hashOfConfig":"27"},{"size":2522,"mtime":1616493659841,"results":"30","hashOfConfig":"27"},{"size":2276,"mtime":1616493659842,"results":"31","hashOfConfig":"27"},{"size":1404,"mtime":1616493659838,"results":"32","hashOfConfig":"27"},{"size":1369,"mtime":1616493659837,"results":"33","hashOfConfig":"27"},{"size":377,"mtime":1616493659839,"results":"34","hashOfConfig":"27"},{"size":527,"mtime":1616493659847,"results":"35","hashOfConfig":"27"},{"size":359,"mtime":1616493659850,"results":"36","hashOfConfig":"27"},{"size":832,"mtime":1616493659840,"results":"37","hashOfConfig":"27"},{"size":175,"mtime":1616493659838,"results":"38","hashOfConfig":"27"},{"size":1257,"mtime":1616493659851,"results":"39","hashOfConfig":"27"},{"size":1635,"mtime":1616493659838,"results":"40","hashOfConfig":"27"},{"size":1121,"mtime":1616493659850,"results":"41","hashOfConfig":"27"},{"size":3325,"mtime":1616493659837,"results":"42","hashOfConfig":"27"},{"size":427,"mtime":1616493659838,"results":"43","hashOfConfig":"27"},{"size":175,"mtime":1616492054207,"results":"44","hashOfConfig":"45"},{"size":66,"mtime":1616493659850,"results":"46","hashOfConfig":"27"},{"size":211,"mtime":1616493659839,"results":"47","hashOfConfig":"27"},{"size":1141,"mtime":1616493659855,"results":"48","hashOfConfig":"27"},{"size":1141,"mtime":1616493659851,"results":"49","hashOfConfig":"27"},{"size":1283,"mtime":1616493659845,"results":"50","hashOfConfig":"27"},{"size":820,"mtime":1614239225760,"results":"51","hashOfConfig":"27"},{"size":832,"mtime":1616492054279,"results":"52","hashOfConfig":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10075zr",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1idtqzm",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},"D:\\FrontEnd\\03-tetris\\src\\index.js",[],"D:\\FrontEnd\\03-tetris\\src\\App.js",["116"],"import React from 'react'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Main from './components/Main/Main'\r\n\r\nfunction App() {\r\n\r\n  if (!localStorage.getItem('record')) {\r\n    localStorage.setItem('record', 0)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Main/>     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\FrontEnd\\03-tetris\\src\\reportWebVitals.js",[],"D:\\FrontEnd\\03-tetris\\src\\components\\Main\\Main.js",["117","118"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport './Main.sass'\r\nimport '../../styles/button.sass'\r\nimport PlayArea from '../PlayArea/PlayArea'\r\nimport emptyField from '../../constants/emptyField'\r\nimport MoveDown from '../../blockMoves/MoveDown'\r\nimport MoveRight from '../../blockMoves/MoveRight'\r\nimport MoveLeft from '../../blockMoves/MoveLeft'\r\nimport Controls from '../Controls/Controls'\r\nimport Stat from '../Stat/Stat'\r\nimport Queue from '../Queue/Queue'\r\nimport gameProcess from '../GameProcess/GameProcess'\r\nimport Rotate from '../../blockMoves/Rotate';\r\n\r\nconst moveDown = new MoveDown()\r\nconst moveRight = new MoveRight()\r\nconst moveLeft = new MoveLeft()\r\nconst rotate = new Rotate()\r\n\r\nfunction Main() {\r\n\r\n    const [state, setState ] = useState(\r\n        {\r\n            playField: emptyField(),\r\n            movingBrick: [],\r\n            baseLine: 3,\r\n            baseColumn: 3,\r\n            nextBrick: [],\r\n            nextBaseColumn: 3,\r\n            score: 0,\r\n            record: localStorage.getItem('record'),\r\n            bricksCount: 0\r\n        }\r\n    )\r\n\r\n    const [ intervalID, setMoveInterval ] = useState()\r\n    const [ gameStatus, setGameStatus ] = useState('stopped')\r\n\r\n    function nextStep() {\r\n        setState(state => gameProcess(state, stopGame, intervalID))\r\n    }\r\n\r\n    function startGame() {\r\n        window.addEventListener('keydown', keyActions)\r\n        setMoveInterval(\r\n            setInterval(nextStep, 1000)\r\n            )\r\n        }\r\n        \r\n    function stopGame() {\r\n        window.removeEventListener('keydown', keyActions)\r\n        clearInterval(intervalID)\r\n    }\r\n\r\n    const keyActions = useCallback((event) => { //хук useCallBack]\r\n        if (event.code === 'Numpad5') {\r\n            setState(state => moveDown.move(state))\r\n        } else if (event.code === 'Numpad4') {\r\n            setState(state => moveLeft.move(state))\r\n        } else if (event.code === 'Numpad6') {\r\n            setState(state => moveRight.move(state))\r\n        }  else if (event.code === 'Numpad8') {\r\n            setState(state => rotate.move(state))\r\n        }       \r\n    }, [])\r\n\r\n    return(\r\n        <main className=\"Main\">\r\n            <Stat score={state.score} record={state.record}/>\r\n            <PlayArea gameData={state}/>\r\n            <div>\r\n                <Controls startGame={startGame} stopGame={stopGame} status={gameStatus}/>\r\n                <Queue gameData={state}/>\r\n            </div>\r\n        </main>\r\n        )\r\n}\r\n\r\nexport default Main;","D:\\FrontEnd\\03-tetris\\src\\components\\PlayArea\\PlayArea.js",["119"],"import React, { useState } from 'react';\r\nimport './PlayArea.sass'\r\n\r\nfunction PlayArea(props) {\r\n\r\n    const playField = props.gameData.playField\r\n    const movingBrick = props.gameData.movingBrick\r\n    const baseLine = props.gameData.baseLine\r\n    const baseColumn = props.gameData.baseColumn\r\n    const brickSideLength = props.gameData.movingBrick.length\r\n\r\n    function compileDataToArr() { //сложнючая функция, которая устанавливает фигуру на поле и преобразует все это в единый массив\r\n        let dataArray = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSideLength || i > baseLine) { //если в строке нет движущейся фигуры\r\n                dataArray = dataArray.concat(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSideLength ) { //если фигуры нет в колонках\r\n                        dataArray = dataArray.concat(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        dataArray = dataArray.concat(movingBrick[i - baseLine + brickSideLength - 1][a - baseColumn] + playField[i][a]) //тут данные поля заменяются данными движ фигруы\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dataArray\r\n    }\r\n\r\n    function renderCells() {\r\n        let cells = []\r\n        let data = compileDataToArr()\r\n        for (let i = 40; i < 240; i++) {\r\n            if (data[i] === 0) {\r\n                cells.push(\r\n                    <div className='PlayArea__cell' key={`${i}`}></div>\r\n            )} else {\r\n                cells.push(\r\n                    <div className='PlayArea__cell_full' key={`${i}`}></div>\r\n            )}\r\n        }\r\n        return cells\r\n    }\r\n\r\n    return(\r\n        <div className=\"PlayArea\">\r\n            {renderCells()}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default PlayArea;","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveRight.js",["120","121"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\n\r\nexport default class MoveLeft extends React.Component {\r\n\r\n    doNotMove(current) {\r\n        return current\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn + 1\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if (baseColumn + brickSize > 10) { \r\n            for (let i = 0; i < brickSize; i++) {\r\n                for (let a = brickSize - 1; a > 9 - baseColumn; a--) {\r\n                    if(movingBrick[i][a] === 1) {\r\n                        return this.doNotMove(current) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n            return this.doNotMove(current)\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveLeft.js",["122","123"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\n\r\nexport default class MoveLeft extends React.Component {\r\n\r\n    doNotMove(current) {\r\n        return current\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn - 1\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if (baseColumn < 0) {\r\n            for (let i = 0; i < brickSize; i++) {\r\n                for (let a = 0; a < baseColumn * -1; a++) {\r\n                    if(movingBrick[i][a] === 1) {\r\n                        return this.doNotMove(current) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n            return this.doNotMove(current)\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\components\\Controls\\Controls.js",["124","125"],"import React, { useState, useEffect } from 'react';\r\nimport './Controls.sass'\r\n\r\nfunction Controls(props) {\r\n\r\n    return(\r\n        <div className='Controls'>\r\n            <button className='button' onClick={props.startGame}>START</button>\r\n            <button className='button' onClick={props.stopGame}>PAUSE</button>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Controls;","D:\\FrontEnd\\03-tetris\\src\\components\\Stat\\Stat.js",["126","127"],"import React, { useState, useEffect } from 'react';\r\nimport './Stat.sass'\r\n\r\nfunction Stat(props) {\r\n\r\n    return(\r\n        <div className='Stat'>\r\n            <p className='Stat__title'>SCORE:</p>\r\n            <p className='Stat__score'>{props.score}</p>\r\n            <p className='Stat__title'>BEST:</p>\r\n            <p className='Stat__score'>{props.record}</p>\r\n            <p className='Stat__title'>SPEED:</p>\r\n            <p className='Stat__score'>{props.speed}</p>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Stat;","D:\\FrontEnd\\03-tetris\\src\\constants\\blockExamples.js",[],"D:\\FrontEnd\\03-tetris\\src\\components\\GameProcess\\GameProcess.js",["128","129","130"],"import React, { useState, useEffect } from 'react';\r\nimport MoveDown from '../../blockMoves/MoveDown'\r\nimport youLose from '../../checks/youLose';\r\nimport fullRows from '../../checks/FullRows'\r\nimport addNewBrick from '../../gameEvents/addNewBrick'\r\nimport removeFullRows from '../../gameEvents/removeFullRows';\r\n\r\nlet moveDown = new MoveDown()\r\n\r\nexport default function gameProcess(current, stopGame, intervalID) {\r\n    if (youLose(current.playField)) {\r\n        console.log('youlose')\r\n        stopGame()\r\n        return current\r\n        // window.removeEventListener('keydown', keyActions)\r\n    }\r\n    if (fullRows(current.playField)) {\r\n        return removeFullRows(current)\r\n    } else if (current.movingBrick.length === 0) {\r\n        return addNewBrick(current)\r\n    } else {\r\n        return moveDown.move(current)\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\checks\\FullRows.js",[],"D:\\FrontEnd\\03-tetris\\src\\gameEvents\\removeFullRows.js",[],"D:\\FrontEnd\\03-tetris\\src\\blockMoves\\Rotate.js",["131","132"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\n\r\nexport default class Rotate extends React.Component {\r\n\r\n    move(current) {\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        let newBaseColumn = baseColumn\r\n        if (baseColumn < 0) {\r\n            newBaseColumn = 0\r\n        } else if (baseColumn > 10 - brickSize) {\r\n            newBaseColumn = 10  - brickSize\r\n        }\r\n\r\n        let rotatedBrick = []\r\n        \r\n        for ( let i = 0; i < brickSize; i++ ) {\r\n            let newRow = []\r\n            for ( let a = 0; a < brickSize; a++ ) {\r\n                newRow.push(movingBrick[brickSize - a - 1][i])\r\n            }\r\n            if (newRow.every((el) => { return el === 0 })) {\r\n                rotatedBrick.unshift(newRow)\r\n            } else {\r\n                rotatedBrick.push(newRow)\r\n            }\r\n        }\r\n\r\n        if (freePlaceToMove( playField, rotatedBrick, baseLine, baseColumn, brickSize ) === false) {\r\n            return current\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: rotatedBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: newBaseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\constants\\emptyField.js",[],"D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveDown.js",["133","134","135"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\nimport randomBlock from '../utilits/randomBlock'\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    stopBlock(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        let newField = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSize || i > baseLine) { //если в строке нет движущейся фигуры\r\n                newField.push(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                let newRow = []\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSize ) { //если фигуры нет в колонках\r\n                        newRow.push(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        if (movingBrick[i - baseLine + brickSize - 1][a - baseColumn] === 1) { //тут данные поля заменяются данными движ фигруы\r\n                            newRow.push(2)\r\n                        } else {\r\n                            newRow.push(playField[i][a])\r\n                        }\r\n                    }\r\n                }\r\n                newField.push(newRow)\r\n            }\r\n        }\r\n\r\n        const newScore = current.score + 1\r\n        let newRecord = current.record\r\n        if (newScore > current.record) {\r\n            newRecord = newScore\r\n            localStorage.setItem('record', newRecord)\r\n        }\r\n\r\n        return {\r\n            playField: newField,\r\n            movingBrick: [],\r\n            baseLine: 3,\r\n            baseColumn: 3,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: newScore,\r\n            record: newRecord,\r\n            bricksCount: current.bricksCount + 1,\r\n        }\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        let movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine + 1\r\n        let baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if ( movingBrick.length === 0 ) {\r\n            return current\r\n        }\r\n        if (baseLine > 23) {\r\n            return this.stopBlock(current) \r\n        } else {\r\n            if(freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n                return this.stopBlock(current)\r\n            }\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,\r\n        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\checks\\freePlaceToMove.js",[],"D:\\FrontEnd\\03-tetris\\src\\checks\\fullRows.js",[],"D:\\FrontEnd\\03-tetris\\src\\constants\\scoreTable.js",[],"D:\\FrontEnd\\03-tetris\\src\\checks\\youLose.js",[],"D:\\FrontEnd\\03-tetris\\src\\utilits\\randomBlock.js",[],"D:\\FrontEnd\\03-tetris\\src\\gameEvents\\addNewBrick.js",["136"],"import scoreTable from '../constants/scoreTable'\r\nimport randomBlock from '../utilits/randomBlock'\r\n\r\nexport default function addNewBrick(current) {\r\n\r\n    if (current.nextBrick.length === 0){\r\n        let movingBrick = randomBlock()\r\n        let nextBrick = randomBlock()\r\n        return {\r\n            playField: current.playField,\r\n            movingBrick: movingBrick.brick,\r\n            baseLine: 3,\r\n            baseColumn: movingBrick.baseColumn,\r\n            nextBrick: nextBrick.brick,\r\n            nextBaseColumn: nextBrick.baseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,\r\n        }\r\n    } else {\r\n        let nextBrick = randomBlock()\r\n        return {\r\n            playField: current.playField,\r\n            movingBrick: current.nextBrick,\r\n            baseLine: 3,\r\n            baseColumn: current.nextBaseColumn,\r\n            nextBrick: nextBrick.brick,\r\n            nextBaseColumn: nextBrick.baseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,\r\n        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\components\\Queue\\Queue.js",["137","138"],"import React, { useState, useEffect } from 'react';\r\nimport './Queue.sass'\r\n\r\nfunction Queue(props) {\r\n\r\n    const nextBrick = props.gameData.nextBrick\r\n   \r\n    function compileDataToArr() { \r\n        let dataArray = []\r\n        for ( let i = 0; i < 4; i++) {\r\n            for (let a = 0; a < 4; a++) {\r\n                if (!nextBrick[i] || !nextBrick[i][a]) {\r\n                    dataArray.push(0)\r\n                } else {\r\n                    dataArray.push(nextBrick[i][a])\r\n                }\r\n            }\r\n        }\r\n        return dataArray\r\n    }\r\n\r\n    function renderCells() {\r\n        let cells = []\r\n        let data = compileDataToArr()\r\n        for (let i = 0; i < 16; i++) {\r\n            if (data[i] === 0 || data[i] === undefined) {\r\n                cells.push(\r\n                    <div className='Queue__cell' key={`${i}`}></div>\r\n            )} else {\r\n                cells.push(\r\n                    <div className='Queue__cell_full' key={`${i}`}></div>\r\n            )}\r\n        }\r\n        return cells\r\n    }\r\n\r\n    return(\r\n        <div className='Queue'>\r\n            <p className='Queue__title'>NEXT:</p>\r\n            <div className='Queue__item'>\r\n                {renderCells()}\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Queue;","D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\GameProcess.js",["139"],"D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\gameProcess.js",["140","141","142"],"import React, { useState, useEffect } from 'react';\r\nimport MoveDown from '../../blockMoves/MoveDown'\r\nimport youLose from '../../checks/youLose';\r\nimport fullRows from '../../checks/fullRows'\r\nimport addNewBrick from '../../gameEvents/addNewBrick'\r\nimport removeFullRows from '../../gameEvents/removeFullRows';\r\n\r\nlet moveDown = new MoveDown()\r\n\r\nexport default function gameProcess(current, stopGame, intervalID) {\r\n    if (youLose(current.playField)) {\r\n        console.log('youlose')\r\n        stopGame()\r\n        return current\r\n        // window.removeEventListener('keydown', keyActions)\r\n    }\r\n    if (fullRows(current.playField)) {\r\n        return removeFullRows(current)\r\n    } else if (current.movingBrick.length === 0) {\r\n        return addNewBrick(current)\r\n    } else {\r\n        return moveDown.move(current)\r\n    }\r\n}",{"ruleId":"143","severity":1,"message":"144","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":12},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"148","line":37,"column":25,"nodeType":"145","messageId":"146","endLine":37,"endColumn":38},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"150","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":13},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"151","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":19},{"ruleId":"143","severity":1,"message":"152","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":18},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":null,"fatal":true,"severity":2,"message":"153","line":12,"column":32},{"ruleId":"143","severity":1,"message":"150","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":13},{"ruleId":"143","severity":1,"message":"149","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'setGameStatus' is assigned a value but never used.","'useState' is defined but never used.","'React' is defined but never used.","'randomBlock' is defined but never used.","'scoreTable' is defined but never used.","Parsing error: Missing semicolon\n\n  10 | export default function GameProcess() {\n  11 |\n> 12 |     nextStep(current, stopGame) {\n     |                                ^\n  13 |         if (youLose(current.playField)) {\n  14 |             console.log('youlose')\n  15 |             stopGame()"]