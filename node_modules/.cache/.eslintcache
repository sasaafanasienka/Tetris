[{"D:\\FrontEnd\\03-tetris\\src\\index.js":"1","D:\\FrontEnd\\03-tetris\\src\\App.js":"2","D:\\FrontEnd\\03-tetris\\src\\reportWebVitals.js":"3","D:\\FrontEnd\\03-tetris\\src\\components\\Main\\Main.js":"4","D:\\FrontEnd\\03-tetris\\src\\components\\PlayArea\\PlayArea.js":"5","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveRight.js":"6","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveLeft.js":"7","D:\\FrontEnd\\03-tetris\\src\\components\\Controls\\Controls.js":"8","D:\\FrontEnd\\03-tetris\\src\\components\\Stat\\Stat.js":"9","D:\\FrontEnd\\03-tetris\\src\\constants\\blockExamples.js":"10","D:\\FrontEnd\\03-tetris\\src\\components\\GameProcess\\GameProcess.js":"11","D:\\FrontEnd\\03-tetris\\src\\checks\\FullRows.js":"12","D:\\FrontEnd\\03-tetris\\src\\gameEvents\\removeFullRows.js":"13","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\Rotate.js":"14","D:\\FrontEnd\\03-tetris\\src\\constants\\emptyField.js":"15","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveDown.js":"16","D:\\FrontEnd\\03-tetris\\src\\checks\\freePlaceToMove.js":"17","D:\\FrontEnd\\03-tetris\\src\\checks\\fullRows.js":"18","D:\\FrontEnd\\03-tetris\\src\\constants\\scoreTable.js":"19","D:\\FrontEnd\\03-tetris\\src\\checks\\youLose.js":"20","D:\\FrontEnd\\03-tetris\\src\\utilits\\randomBlock.js":"21","D:\\FrontEnd\\03-tetris\\src\\gameEvents\\addNewBrick.js":"22","D:\\FrontEnd\\03-tetris\\src\\components\\Queue\\Queue.js":"23","D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\GameProcess.js":"24","D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\gameProcess.js":"25","D:\\FrontEnd\\03-tetris\\src\\constants\\colors.js":"26","D:\\FrontEnd\\03-tetris\\src\\redux\\rootReducer.js":"27","D:\\FrontEnd\\03-tetris\\src\\redux\\reducers\\playAreaReducer.js":"28"},{"size":445,"mtime":1617178498110,"results":"29","hashOfConfig":"30"},{"size":336,"mtime":1616493659836,"results":"31","hashOfConfig":"30"},{"size":375,"mtime":1616493659853,"results":"32","hashOfConfig":"30"},{"size":2958,"mtime":1617177613711,"results":"33","hashOfConfig":"30"},{"size":2398,"mtime":1617179166724,"results":"34","hashOfConfig":"30"},{"size":1425,"mtime":1617177613683,"results":"35","hashOfConfig":"30"},{"size":1390,"mtime":1617177613674,"results":"36","hashOfConfig":"30"},{"size":565,"mtime":1617177613710,"results":"37","hashOfConfig":"30"},{"size":418,"mtime":1617177613811,"results":"38","hashOfConfig":"30"},{"size":359,"mtime":1617177613845,"results":"39","hashOfConfig":"30"},{"size":770,"mtime":1617177613711,"results":"40","hashOfConfig":"30"},{"size":202,"mtime":1617177613692,"results":"41","hashOfConfig":"30"},{"size":1259,"mtime":1617177613865,"results":"42","hashOfConfig":"30"},{"size":1635,"mtime":1616493659838,"results":"43","hashOfConfig":"30"},{"size":1121,"mtime":1616493659850,"results":"44","hashOfConfig":"30"},{"size":3406,"mtime":1617177613667,"results":"45","hashOfConfig":"30"},{"size":492,"mtime":1617177613692,"results":"46","hashOfConfig":"30"},{"size":175,"mtime":1616492054207,"results":"47","hashOfConfig":"48"},{"size":66,"mtime":1616493659850,"results":"49","hashOfConfig":"30"},{"size":211,"mtime":1616493659839,"results":"50","hashOfConfig":"30"},{"size":1141,"mtime":1617177566427,"results":"51","hashOfConfig":"30"},{"size":1141,"mtime":1617177566401,"results":"52","hashOfConfig":"30"},{"size":1344,"mtime":1617177613775,"results":"53","hashOfConfig":"30"},{"size":820,"mtime":1614239225760,"results":"54","hashOfConfig":"30"},{"size":832,"mtime":1616492054279,"results":"55","hashOfConfig":"48"},{"size":305,"mtime":1617177613858,"results":"56","hashOfConfig":"30"},{"size":210,"mtime":1617179017202,"results":"57","hashOfConfig":"30"},{"size":267,"mtime":1617178993369,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10075zr",{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1idtqzm",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\FrontEnd\\03-tetris\\src\\index.js",[],"D:\\FrontEnd\\03-tetris\\src\\App.js",["129"],"import React from 'react'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Main from './components/Main/Main'\r\n\r\nfunction App() {\r\n\r\n  if (!localStorage.getItem('record')) {\r\n    localStorage.setItem('record', 0)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Main/>     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["130","131"],"D:\\FrontEnd\\03-tetris\\src\\reportWebVitals.js",[],["132","133"],"D:\\FrontEnd\\03-tetris\\src\\components\\Main\\Main.js",["134","135"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport './Main.sass'\r\nimport '../../styles/button.sass'\r\nimport PlayArea from '../PlayArea/PlayArea'\r\nimport emptyField from '../../constants/emptyField'\r\nimport MoveDown from '../../blockMoves/MoveDown'\r\nimport MoveRight from '../../blockMoves/MoveRight'\r\nimport MoveLeft from '../../blockMoves/MoveLeft'\r\nimport Controls from '../Controls/Controls'\r\nimport Stat from '../Stat/Stat'\r\nimport Queue from '../Queue/Queue'\r\nimport gameProcess from '../GameProcess/GameProcess'\r\nimport Rotate from '../../blockMoves/Rotate';\r\n\r\nconst moveDown = new MoveDown()\r\nconst moveRight = new MoveRight()\r\nconst moveLeft = new MoveLeft()\r\nconst rotate = new Rotate()\r\n\r\nfunction Main() {\r\n\r\n    const [state, setState ] = useState(\r\n        {\r\n            playField: emptyField(),\r\n            movingBrick: [],\r\n            baseLine: 3,\r\n            baseColumn: 3,\r\n            nextBrick: [],\r\n            nextBaseColumn: 3,\r\n            score: 0,\r\n            record: localStorage.getItem('record'),\r\n            bricksCount: 0\r\n        }\r\n    )\r\n\r\n    const [ intervalID, setMoveInterval ] = useState()\r\n    const [ gameStatus, setGameStatus ] = useState('stopped')\r\n\r\n    function nextStep() {\r\n        setState(state => gameProcess(state, stopGame, intervalID))\r\n    }\r\n\r\n    function startGame() {\r\n        window.addEventListener('keydown', keyActions)\r\n        setMoveInterval(\r\n            setInterval(nextStep, 1000)\r\n            )\r\n        }\r\n        \r\n    function stopGame() {\r\n        window.removeEventListener('keydown', keyActions)\r\n        clearInterval(intervalID)\r\n    }\r\n\r\n    const keyActions = useCallback((event) => { //хук useCallBack]\r\n        console.log(event)\r\n        if (event.code === 'Numpad5' || event.code === 'ArrowDown' || event.code === 'KeyS') {\r\n            event.preventDefault()\r\n            setState(state => moveDown.move(state))\r\n        } else if (event.code === 'Numpad4' || event.code === 'ArrowLeft' || event.code === 'KeyA') {\r\n            event.preventDefault()\r\n            setState(state => moveLeft.move(state))\r\n        } else if (event.code === 'Numpad6' || event.code === 'ArrowRight' || event.code === 'KeyD') {\r\n            event.preventDefault()\r\n            setState(state => moveRight.move(state))\r\n        }  else if (event.code === 'Numpad8' || event.code === 'ArrowUp' || event.code === 'KeyW') {\r\n            event.preventDefault()\r\n            setState(state => rotate.move(state))\r\n        }        \r\n    }, [])\r\n\r\n    return(\r\n        <main className=\"Main\">\r\n            <PlayArea gameData={state}/>\r\n            <div className=\"Main__controls-panel\">\r\n                <Stat score={state.score} record={state.record}/>       \r\n                <Controls startGame={startGame} stopGame={stopGame} status={gameStatus}/>\r\n                <Queue gameData={state}/>\r\n            </div>\r\n        </main>\r\n        )\r\n}\r\n\r\nexport default Main;","D:\\FrontEnd\\03-tetris\\src\\components\\PlayArea\\PlayArea.js",["136"],"D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveRight.js",["137","138"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\n\r\nexport default class MoveLeft extends React.Component {\r\n\r\n    doNotMove(current) {\r\n        return current\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn + 1\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if (baseColumn + brickSize > 10) { \r\n            for (let i = 0; i < brickSize; i++) {\r\n                for (let a = brickSize - 1; a > 9 - baseColumn; a--) {\r\n                    if ([1,2,3,4,5,6,7].includes(movingBrick[i][a])) {\r\n                        return this.doNotMove(current) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n            return this.doNotMove(current)\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveLeft.js",["139","140"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\n\r\nexport default class MoveLeft extends React.Component {\r\n\r\n    doNotMove(current) {\r\n        return current\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn - 1\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if (baseColumn < 0) {\r\n            for (let i = 0; i < brickSize; i++) {\r\n                for (let a = 0; a < baseColumn * -1; a++) {\r\n                    if ([1,2,3,4,5,6,7].includes(movingBrick[i][a])) {\r\n                        return this.doNotMove(current) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n            return this.doNotMove(current)\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\components\\Controls\\Controls.js",["141","142","143","144"],"import React, { useState, useEffect } from 'react';\r\nimport './Controls.sass'\r\nimport start from '../../images/start.svg'\r\nimport pause from '../../images/pause.svg'\r\n\r\nfunction Controls(props) {\r\n\r\n    return(\r\n        <div className='Controls'>\r\n            <button className='button' onClick={props.startGame}>\r\n                <img src={start}></img>\r\n            </button>\r\n            <button className='button' onClick={props.stopGame}>\r\n                <img src={pause}></img>\r\n            </button>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Controls;","D:\\FrontEnd\\03-tetris\\src\\components\\Stat\\Stat.js",["145","146"],"import React, { useState, useEffect } from 'react';\r\nimport './Stat.sass'\r\n\r\nfunction Stat(props) {\r\n\r\n    return(\r\n        <div className='Stat'>\r\n            <p className='Stat__title'>SCORE:</p>\r\n            <p className='Stat__score'>{props.score}</p>\r\n            <p className='Stat__title'>BEST:</p>\r\n            <p className='Stat__score'>{props.record}</p>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Stat;","D:\\FrontEnd\\03-tetris\\src\\constants\\blockExamples.js",[],"D:\\FrontEnd\\03-tetris\\src\\components\\GameProcess\\GameProcess.js",["147","148","149"],"import React, { useState, useEffect } from 'react';\r\nimport MoveDown from '../../blockMoves/MoveDown'\r\nimport youLose from '../../checks/youLose';\r\nimport fullRows from '../../checks/FullRows'\r\nimport addNewBrick from '../../gameEvents/addNewBrick'\r\nimport removeFullRows from '../../gameEvents/removeFullRows';\r\n\r\nlet moveDown = new MoveDown()\r\n\r\nexport default function gameProcess(current, stopGame, intervalID) {\r\n    if (youLose(current.playField)) {\r\n        console.log('youlose')\r\n        stopGame()\r\n        return current\r\n    }\r\n    if (fullRows(current.playField)) {\r\n        return removeFullRows(current)\r\n    } else if (current.movingBrick.length === 0) {\r\n        return addNewBrick(current)\r\n    } else {\r\n        return moveDown.move(current)\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\checks\\FullRows.js",[],"D:\\FrontEnd\\03-tetris\\src\\gameEvents\\removeFullRows.js",[],"D:\\FrontEnd\\03-tetris\\src\\blockMoves\\Rotate.js",["150","151"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\n\r\nexport default class Rotate extends React.Component {\r\n\r\n    move(current) {\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        let newBaseColumn = baseColumn\r\n        if (baseColumn < 0) {\r\n            newBaseColumn = 0\r\n        } else if (baseColumn > 10 - brickSize) {\r\n            newBaseColumn = 10  - brickSize\r\n        }\r\n\r\n        let rotatedBrick = []\r\n        \r\n        for ( let i = 0; i < brickSize; i++ ) {\r\n            let newRow = []\r\n            for ( let a = 0; a < brickSize; a++ ) {\r\n                newRow.push(movingBrick[brickSize - a - 1][i])\r\n            }\r\n            if (newRow.every((el) => { return el === 0 })) {\r\n                rotatedBrick.unshift(newRow)\r\n            } else {\r\n                rotatedBrick.push(newRow)\r\n            }\r\n        }\r\n\r\n        if (freePlaceToMove( playField, rotatedBrick, baseLine, baseColumn, brickSize ) === false) {\r\n            return current\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: rotatedBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: newBaseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\constants\\emptyField.js",[],"D:\\FrontEnd\\03-tetris\\src\\blockMoves\\MoveDown.js",["152","153","154"],"import React, { useState, useEffect } from 'react';\r\nimport freePlaceToMove from '../checks/freePlaceToMove';\r\nimport randomBlock from '../utilits/randomBlock'\r\n\r\nexport default class MoveDown extends React.Component {\r\n\r\n    stopBlock(current) {\r\n\r\n        const playField = current.playField\r\n        const movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine\r\n        const baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        let newField = []\r\n        for ( let i = 0; i < 24; i++) {\r\n            if (i <= baseLine - brickSize || i > baseLine) { //если в строке нет движущейся фигуры\r\n                newField.push(playField[i]) //то оставляем поле как есть\r\n            } else {\r\n                let newRow = []\r\n                for ( let a = 0; a < 10; a++ ) { //если движущаяся фигура есть, начинаем првоерять по колонкам\r\n                    if ( a < baseColumn || a >= baseColumn + brickSize ) { //если фигуры нет в колонках\r\n                        newRow.push(playField[i][a])  // тоже оставляем как есть\r\n                    } else {\r\n                        if ([1,2,3,4,5,6,7].includes(movingBrick[i - baseLine + brickSize - 1][a - baseColumn])) { //тут данные поля заменяются данными движ фигруы\r\n                            newRow.push(movingBrick[i - baseLine + brickSize - 1][a - baseColumn] + 10)\r\n                        } else {\r\n                            newRow.push(playField[i][a])\r\n                        }\r\n                    }\r\n                }\r\n                newField.push(newRow)\r\n            }\r\n        }\r\n\r\n        const newScore = current.score + 1\r\n        let newRecord = current.record\r\n        if (newScore > current.record) {\r\n            newRecord = newScore\r\n            localStorage.setItem('record', newRecord)\r\n        }\r\n\r\n        return {\r\n            playField: newField,\r\n            movingBrick: [],\r\n            baseLine: 3,\r\n            baseColumn: 3,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: newScore,\r\n            record: newRecord,\r\n            bricksCount: current.bricksCount + 1,\r\n        }\r\n    }\r\n\r\n    move(current) {\r\n\r\n        const playField = current.playField\r\n        let movingBrick = current.movingBrick\r\n        const baseLine = current.baseLine + 1\r\n        let baseColumn = current.baseColumn\r\n        const brickSize = current.movingBrick.length\r\n\r\n        if ( movingBrick.length === 0 ) {\r\n            return current\r\n        }\r\n        if (baseLine > 23) {\r\n            return this.stopBlock(current) \r\n        } else {\r\n            if(freePlaceToMove( playField, movingBrick, baseLine, baseColumn, brickSize ) === false) {\r\n                return this.stopBlock(current)\r\n            }\r\n        }\r\n\r\n        return {\r\n            playField: playField,\r\n            movingBrick: movingBrick,\r\n            baseLine: baseLine,\r\n            baseColumn: baseColumn,\r\n            nextBrick: current.nextBrick,\r\n            nextBaseColumn: current.nextBaseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,\r\n        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\checks\\freePlaceToMove.js",[],"D:\\FrontEnd\\03-tetris\\src\\checks\\fullRows.js",[],"D:\\FrontEnd\\03-tetris\\src\\constants\\scoreTable.js",[],"D:\\FrontEnd\\03-tetris\\src\\checks\\youLose.js",[],"D:\\FrontEnd\\03-tetris\\src\\utilits\\randomBlock.js",[],"D:\\FrontEnd\\03-tetris\\src\\gameEvents\\addNewBrick.js",["155"],"import scoreTable from '../constants/scoreTable'\r\nimport randomBlock from '../utilits/randomBlock'\r\n\r\nexport default function addNewBrick(current) {\r\n\r\n    if (current.nextBrick.length === 0){\r\n        let movingBrick = randomBlock()\r\n        let nextBrick = randomBlock()\r\n        return {\r\n            playField: current.playField,\r\n            movingBrick: movingBrick.brick,\r\n            baseLine: 3,\r\n            baseColumn: movingBrick.baseColumn,\r\n            nextBrick: nextBrick.brick,\r\n            nextBaseColumn: nextBrick.baseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,\r\n        }\r\n    } else {\r\n        let nextBrick = randomBlock()\r\n        return {\r\n            playField: current.playField,\r\n            movingBrick: current.nextBrick,\r\n            baseLine: 3,\r\n            baseColumn: current.nextBaseColumn,\r\n            nextBrick: nextBrick.brick,\r\n            nextBaseColumn: nextBrick.baseColumn,\r\n            score: current.score,\r\n            record: current.record,\r\n            bricksCount: current.bricksCount,\r\n        }\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\components\\Queue\\Queue.js",["156","157"],"import React, { useState, useEffect } from 'react';\r\nimport colors from '../../constants/colors'\r\nimport './Queue.sass'\r\n\r\nfunction Queue(props) {\r\n\r\n    const nextBrick = props.gameData.nextBrick\r\n   \r\n    function compileDataToArr() { \r\n        let dataArray = []\r\n        for ( let i = 0; i < 4; i++) {\r\n            for (let a = 0; a < 4; a++) {\r\n                if (!nextBrick[i] || !nextBrick[i][a]) {\r\n                    dataArray.push(0)\r\n                } else {\r\n                    dataArray.push(nextBrick[i][a])\r\n                }\r\n            }\r\n        }\r\n        return dataArray\r\n    }\r\n\r\n    function renderCells() {\r\n        let cells = []\r\n        let data = compileDataToArr()\r\n        for (let i = 0; i < 16; i++) {\r\n            if (data[i] === 0 || data[i] === undefined) {\r\n                cells.push(\r\n                    <div className='Queue__cell' key={`${i}`}></div>\r\n            )} else {\r\n                cells.push(\r\n                    <div className={`Queue__cell_${colors[data[i]]}`} key={`${i}`}></div>\r\n            )}\r\n        }\r\n        return cells\r\n    }\r\n\r\n    return(\r\n        <div className='Queue'>\r\n            <p className='Queue__title'>NEXT:</p>\r\n            <div className='Queue__item'>\r\n                {renderCells()}\r\n            </div>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Queue;","D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\GameProcess.js",["158"],"D:\\FrontEnd\\03-tetris\\src\\components\\gameProcess\\gameProcess.js",["159","160","161"],"import React, { useState, useEffect } from 'react';\r\nimport MoveDown from '../../blockMoves/MoveDown'\r\nimport youLose from '../../checks/youLose';\r\nimport fullRows from '../../checks/fullRows'\r\nimport addNewBrick from '../../gameEvents/addNewBrick'\r\nimport removeFullRows from '../../gameEvents/removeFullRows';\r\n\r\nlet moveDown = new MoveDown()\r\n\r\nexport default function gameProcess(current, stopGame, intervalID) {\r\n    if (youLose(current.playField)) {\r\n        console.log('youlose')\r\n        stopGame()\r\n        return current\r\n        // window.removeEventListener('keydown', keyActions)\r\n    }\r\n    if (fullRows(current.playField)) {\r\n        return removeFullRows(current)\r\n    } else if (current.movingBrick.length === 0) {\r\n        return addNewBrick(current)\r\n    } else {\r\n        return moveDown.move(current)\r\n    }\r\n}","D:\\FrontEnd\\03-tetris\\src\\constants\\colors.js",[],"D:\\FrontEnd\\03-tetris\\src\\redux\\rootReducer.js",[],"D:\\FrontEnd\\03-tetris\\src\\redux\\reducers\\playAreaReducer.js",[],{"ruleId":"162","severity":1,"message":"163","line":2,"column":8,"nodeType":"164","messageId":"165","endLine":2,"endColumn":12},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"166","replacedBy":"170"},{"ruleId":"168","replacedBy":"171"},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"173","line":37,"column":25,"nodeType":"164","messageId":"165","endLine":37,"endColumn":38},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"176","line":11,"column":17,"nodeType":"177","endLine":11,"endColumn":34},{"ruleId":"175","severity":1,"message":"176","line":14,"column":17,"nodeType":"177","endLine":14,"endColumn":34},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"178","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":13},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"179","line":3,"column":8,"nodeType":"164","messageId":"165","endLine":3,"endColumn":19},{"ruleId":"162","severity":1,"message":"180","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":18},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":null,"fatal":true,"severity":2,"message":"181","line":12,"column":32},{"ruleId":"162","severity":1,"message":"178","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":13},{"ruleId":"162","severity":1,"message":"174","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["182"],"no-negated-in-lhs",["183"],["182"],["183"],"'useEffect' is defined but never used.","'setGameStatus' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'React' is defined but never used.","'randomBlock' is defined but never used.","'scoreTable' is defined but never used.","Parsing error: Missing semicolon\n\n  10 | export default function GameProcess() {\n  11 |\n> 12 |     nextStep(current, stopGame) {\n     |                                ^\n  13 |         if (youLose(current.playField)) {\n  14 |             console.log('youlose')\n  15 |             stopGame()","no-global-assign","no-unsafe-negation"]